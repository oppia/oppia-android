// Code generated by moshi-kotlin-codegen. Do not edit.
package org.oppia.data.backends.gae.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.String
import kotlin.collections.List

class GaeSubtopicSummaryJsonAdapter(moshi: Moshi) : JsonAdapter<GaeSubtopicSummary>() {
    private val options: JsonReader.Options = JsonReader.Options.of("id", "title", "skill_ids")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "subtopicId")

    private val nullableListOfNullableStringAdapter: JsonAdapter<List<String?>?> =
            moshi.adapter<List<String?>?>(Types.newParameterizedType(List::class.java, String::class.java), kotlin.collections.emptySet(), "skillIds")

    override fun toString(): String = "GeneratedJsonAdapter(GaeSubtopicSummary)"

    override fun fromJson(reader: JsonReader): GaeSubtopicSummary {
        var subtopicId: String? = null
        var title: String? = null
        var skillIds: List<String?>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> subtopicId = nullableStringAdapter.fromJson(reader)
                1 -> title = nullableStringAdapter.fromJson(reader)
                2 -> skillIds = nullableListOfNullableStringAdapter.fromJson(reader)
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = GaeSubtopicSummary(
                subtopicId = subtopicId,
                title = title,
                skillIds = skillIds)
        return result
    }

    override fun toJson(writer: JsonWriter, value: GaeSubtopicSummary?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("id")
        nullableStringAdapter.toJson(writer, value.subtopicId)
        writer.name("title")
        nullableStringAdapter.toJson(writer, value.title)
        writer.name("skill_ids")
        nullableListOfNullableStringAdapter.toJson(writer, value.skillIds)
        writer.endObject()
    }
}

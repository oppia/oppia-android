syntax = "proto3";

package model;

import "subtitled_html.proto";
import "thumbnail.proto";
import "translation.proto";
import "voiceover.proto";

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// Corresponds to a single topic that can be read, played, trained, or reviewed.
message Topic {
  // The ID corresponding to the topic.
  string topic_id = 1;

  // The topic's name.
  string name = 2;

  // A brief description of the topic.
  string description = 3;

  // A list of summarized stories contained within this topic.
  repeated StorySummary story = 4;

  // A list of subtopic contained within this topic.
  repeated Subtopic subtopic = 5;

  // The thumbnail corresponding to this topic.
  LessonThumbnail topic_thumbnail = 6;

  // The number of on-disk bytes this topic consumes.
  int64 disk_size_bytes = 7;

  // Specifics about whether this topic is playable.
  TopicPlayAvailability topic_play_availability = 8;
}

// Corresponds to details around whether a particular topic is playable.
message TopicPlayAvailability {
  // Corresponds to the availability of this topic (e.g. whether it can be played now).
  oneof availability {
    // Indicates this topic is available to be played.
    bool available_to_play_now = 1;

    // Indicates this topic is not yet available to be played but is expected to be in the future.
    bool available_to_play_in_future = 2;
  }
}

// Corresponds to a concept card that can be displayed for a specific skill.
message ConceptCard {
  // The ID corresponding to the skill this concept is representing.
  string skill_id = 1;

  // The skill's description that can help provide context on what content is being reviewed.
  string skill_description = 2;

  // The core explanation of the skill being reviewed.
  SubtitledHtml explanation = 3;

  // A list of worked examples to present to the learner.
  repeated SubtitledHtml worked_example = 4;

  // Mapping from content_id to a VoiceoverMapping for each SubtitledHtml in this concept card that has corresponding
  // recorded audio to play.
  map<string, VoiceoverMapping> recorded_voiceover = 5;

  // Mapping from content_id to a TranslationMapping for each SubtitledHtml in this concept card that has corresponding
  // translations.
  map<string, TranslationMapping> written_translation = 6;
}

// A summary of a story that can be played within a topic.
message StorySummary {
  // The ID of the story.
  string story_id = 1;

  // The name of the story.
  string story_name = 2;

  // The thumbnail corresponding to this story.
  LessonThumbnail story_thumbnail = 3;

  // A list of summarized chapters/explorations that can be played within the story.
  repeated ChapterSummary chapter = 4;
}

// A summary of a chapter/exploration that can be played.
message ChapterSummary {
  // The exploration ID associated with this chapter.
  string exploration_id = 1;

  // The chapter's name (which is the same as the exploration's title).
  string name = 2;

  // Summary of this chapter.
  string summary = 3;

  // Indicates the playable state of the current chapter, including whether it's already been completed.
  ChapterPlayState chapter_play_state = 4;

  // The thumbnail corresponding to this chapter.
  LessonThumbnail chapter_thumbnail = 5;

  // Prerequisite chapter to unlock this chapter. It is only defined when the play state of this
  // chapter is NOT_PLAYABLE_MISSING_PREREQUISITES.
  ChapterSummary missing_prerequisite_chapter = 6;
}

// A summary of a skill that can be trained or reviewed by the player.
message SkillSummary {
  // The ID of the skill.
  string skill_id = 1;

  // A brief description of the skill.
  string description = 2;
}

// Corresponds to the on-disk storage representing all available topics for play.
message Classroom {
  // Known topics that the player can play.
  TopicSummary topic_summary = 1;

  // The last time this classroom was updated.
  int64 last_update_time_ms = 2;
}

// Corresponds to the list of topics that are currently being played and are not fully finished.
message OngoingTopicList {
  // All topics that are currently being played and have not finished.
  repeated Topic topic = 1;
}

// Corresponds to the list of topics that can be shown on the homescreen.
message TopicList {

  // All topics that are available to the player.
  repeated TopicSummary topic_summary = 2;
}

// Corresponds to the list of stories that have been completed across all topics.
message CompletedStoryList {
  // List of completed stories
  repeated CompletedStory completed_story = 1;
}

// The summary of a story that has been completed for a profile.
message CompletedStory {
  // The ID of the story being completed.
  string story_id = 1;

  // The name of the story being completed.
  string story_name = 2;

  // The ID of the topic which contains this story.
  string topic_id = 3;

  // The name of the topic this story is part of.
  string topic_name = 4;

  // The thumbnail that should be displayed for this completed story.
  LessonThumbnail lesson_thumbnail = 5;
}

// Corresponds to the list of stories the player is currently playing across all topics.
message OngoingStoryList {
  // Ongoing stories from within the last 7 days.
  repeated PromotedStory recent_story = 1;

  // Other ongoing stories from longer than 7 days ago.
  repeated PromotedStory older_story = 2;
}

// The summary of a story that should be promoted, either because it's been started and not yet completed by the player,
// or because they have completed all other lessons and may find this one interesting.
message PromotedStory {
  // The ID of the story being promoted.
  string story_id = 1;

  // The name of the story being promoted.
  string story_name = 2;

  // The ID of the topic this story is part of.
  string topic_id = 3;

  // The name of the topic this story is part of.
  string topic_name = 4;

  // The name of the next chapter (exploration title) to complete.
  string next_chapter_name = 5;

  // The exploration id next chapter to complete.
  string exploration_id = 6;

  // The number of lessons the player has completed in this story. This may be 0 if the promoted story is promoted for
  // reasons other than to complete it (e.g. it's recommended).
  int32 completed_chapter_count = 7;

  // The total number of lessons this story contains.
  int32 total_chapter_count = 8;

  // The thumbnail that should be displayed for this promoted story.
  LessonThumbnail lesson_thumbnail = 9;

  // Indicates whether the topic containing this story is 'learned'
  // (meaning at least one story was completed).
  bool is_topic_learned = 10;
}

// A homescreen summary of a topic.
message TopicSummary {
  // The ID of the topic.
  string topic_id = 1;

  // The name of the topic.
  string name = 2;

  // The structural version of the topic.
  int32 version = 3;

  // The total number of lessons associated with this topic.
  int32 total_chapter_count = 4;

  // The associated thumbnail that should be displayed with this topic summary.
  LessonThumbnail topic_thumbnail = 5;

  // Specifics about whether this topic is playable.
  TopicPlayAvailability topic_play_availability = 6;
}

// Represents the play state of a single chapter.
enum ChapterPlayState {
  // The completion status is unknown.
  COMPLETION_STATUS_UNSPECIFIED = 0;

  // The chapter has not yet been started, but can be started by the player.
  NOT_STARTED = 1;

  // The chapter has not yet been started, and cannot be started since the player is missing prerequisites.
  NOT_PLAYABLE_MISSING_PREREQUISITES = 2;

  // The chapter has been started but not completed by the player.
  STARTED_NOT_COMPLETED = 3;

  // The chapter has been completed by the player.
  COMPLETED = 4;
}

// Top level proto used to store topic progress per-profile.
message TopicProgressDatabase {
  // Map from topic ID to TopicProgress.
  map<string, TopicProgress> topic_progress = 1;
}

// Represents the topic progress.
message TopicProgress {
  // The ID corresponding to the topic.
  string topic_id = 1;

  // Map from story ID to StoryProgress.
  map<string, StoryProgress> story_progress = 2;
}

// A structure corresponding to the promoted stories. This structure is set up
// to properly account for recently played stories, recommended stories
// and coming soon topics.
message PromotedActivityList {
  oneof recommendation_type {
    PromotedStoryList promoted_story_list = 1;
    ComingSoonTopicList coming_soon_topic_list = 2;
  }
}

// Corresponds to the list of stories the player is currently playing across all topics and recommended stories.
message PromotedStoryList {
  // Ongoing stories from within the last 7 days.
  repeated PromotedStory recently_played_story   = 1;

  // Other ongoing stories from longer than 7 days ago.
  repeated PromotedStory older_played_story = 2;

  // Stories specifically recommended for the learner to complete next.
  repeated PromotedStory suggested_story = 3;
}

// Corresponds to the list of coming soon topics that can be shown on the home screen.
message ComingSoonTopicList {
  // Upcoming topics for the learner.
  repeated UpcomingTopic upcoming_topic = 1;
}

// Represents topics not yet ready to be played by the learner.
message UpcomingTopic {
  // The ID of the topic.
  string topic_id = 1;

  // The name of the topic.
  string name = 2;

  // The structural version of the topic.
  int32 version = 3;

  // The associated thumbnail that should be displayed with this topic.
  LessonThumbnail lesson_thumbnail = 4;

  // Specifics about whether this topic is playable.
  TopicPlayAvailability topic_play_availability = 5;
}

// Represents the story progress.
message StoryProgress {
  // The ID corresponding to the story.
  string story_id = 1;

  // Map from exploration ID to ChapterPlayState.
  map<string, ChapterProgress> chapter_progress = 2;
}

// Represents the chapter progress.
message ChapterProgress {
  // The ID corresponding to the exploration.
  string exploration_id = 1;

  // The playability state of chapter.
  ChapterPlayState chapter_play_state = 2;

  // Timestamp to record last time the exploration was played in ms.
  int64 last_played_timestamp = 3;
}

// Represents user's preference for using cellular data
message CellularDataPreference {
  // Preference on whether to hide CellularDataDialogFragment
  bool hide_dialog = 1;

  // Preference on whether to use cellular data
  bool use_cellular_data = 2;
}

// Corresponds to a single subtopic.
message Subtopic {
  // The ID of the subtopic.
  int32 subtopic_id = 1;

  // The title of the subtopic.
  string title = 2;

  // The list of skill ids associated with the subtopic.
  repeated string skill_ids = 3;

  // The thumbnail corresponding to this subtopic.
  LessonThumbnail subtopic_thumbnail = 4;
}

// Corresponds to a revision card that can be displayed for a specific subtopic.
message RevisionCard {
  // The title corresponding to the subtopic.
  string subtopic_title = 1;

  // The core explanation of the subtopic being revised.
  SubtitledHtml page_contents = 3;

  // Mapping from content_id to a VoiceoverMapping for each SubtitledHtml in this revision card that has corresponding
  // recorded audio to play.
  map<string, VoiceoverMapping> recorded_voiceover = 5;

  // Mapping from content_id to a TranslationMapping for each SubtitledHtml in this revision card that has corresponding
  // translations.
  map<string, TranslationMapping> written_translation = 6;
}

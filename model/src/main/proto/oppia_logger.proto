syntax = "proto3";

package model;

import "languages.proto";
import "profile.proto";
import "survey.proto";
import "platform_parameter.proto";

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// Structure for an event log.
message EventLog {
  // The timestamp of the event.
  int64 timestamp = 1;

  // Deprecated Event Action. This is now handled via the context below.
  reserved 2;

  // The priority of the event.
  Priority priority = 3;

  // The activity context of the event.
  Context context = 4;

  // The profile to which this event corresponds, or empty if this event is not tied to a particular
  // profile. This is only used for diagnostic purposes as events are only ever logged anonymously
  // at source.
  ProfileId profile_id = 8;

  // The app language selection context at the time of this event's creation.
  AppLanguageSelection app_language_selection = 5;

  // The written language selection context at the time of this event's creation.
  WrittenTranslationLanguageSelection written_translation_language_selection = 6;

  // The audio language selection context at the time of this event's creation.
  AudioTranslationLanguageSelection audio_translation_language_selection = 7;

  // Structure of an activity context.
  message Context {
    // Deprecated exploration context. This is now handled via the open_exploration_activity context
    // below.
    reserved 1;

    // Deprecated topic context. This is now broken down into 4 different contexts and is handled
    // via the open_info_tab, open_lessons_tab, open_practice_tab and open_revision_tab contexts
    // below.
    reserved 2;

    // Deprecated question context. This is now handled via the open_question_player context below.
    reserved 3;

    // Deprecated story context. This is now handled via the open_story_activity context below.
    reserved 4;

    // Deprecated concept card context. This is now handled via the open_concept_card context below.
    reserved 5;

    // Deprecated revision card context. This is now handled via the open_concept_card context
    // below.
    reserved 6;

    oneof activity_context {
      // The event being logged is related to opening of exploration activity.
      ExplorationContext open_exploration_activity = 7;

      // The event being logged is related to opening of info tab under topic activity.
      TopicContext open_info_tab = 8;

      // The event being logged is related to opening of lessons tab under topic activity.
      TopicContext open_lessons_tab = 9;

      // The event being logged is related to opening of practice tab under topic activity.
      TopicContext open_practice_tab = 10;

      // The event being logged is related to opening of revision tab under topic activity.
      TopicContext open_revision_tab = 11;

      // The event being logged is related to the opening of question player.
      QuestionContext open_question_player = 12;

      // The event being logged is related to the opening of story activity.
      StoryContext open_story_activity = 13;

      // The event being logged is related to the opening of concept card.
      ConceptCardContext open_concept_card = 14;

      // The event being logged is related to the opening of a revision card.
      RevisionCardContext open_revision_card = 15;

      // The event being logged is related to the closing of a revision card.
      RevisionCardContext close_revision_card = 36;

      // The event being logged is related to starting an exploration card.
      CardContext start_card_context = 16;

      // The event being logged is related to ending an exploration card.
      CardContext end_card_context = 17;

      // The event being logged is related to offering a hint when it becomes available.
      HintContext hint_unlocked_context = 18;

      // The event being logged is related to accessing a hint.
      HintContext access_hint_context = 19;

      // The event being logged is related to offering a solution when it becomes available.
      ExplorationContext solution_unlocked_context = 20;

      // The event being logged is related to accessing a solution.
      ExplorationContext access_solution_context = 21;

      // The event being logged is related to submitting an answer.
      SubmitAnswerContext submit_answer_context = 22;

      // The event being logged is related to playing a voiceover.
      VoiceoverActionContext play_voice_over_context = 23;

      // The event being logged is related to pausing a voiceover.
      VoiceoverActionContext pause_voice_over_context = 35;

      // The event being logged is related to backgrounding of the application.
      LearnerDetailsContext app_in_background_context = 24;

      // The event being logged is related to foregrounding of the application.
      LearnerDetailsContext app_in_foreground_context = 25;

      // The event being logged is related to exiting an exploration.
      ExplorationContext exit_exploration_context = 26;

      // The event being logged is related to finishing an exploration.
      ExplorationContext finish_exploration_context = 27;

      // The event being logged is related to resuming an exploration.
      LearnerDetailsContext resume_exploration_context = 28;

      // The event being logged is related to restarting an exploration.
      LearnerDetailsContext start_over_exploration_context = 29;

      // The event being logged is related to deleting a profile.
      LearnerDetailsContext delete_profile_context = 30;

      // The event being logged is related to the opening of home activity. The boolean value here
      // has no importance and is always 'true'.
      bool open_home = 31;

      // The event being logged is related to the opening of profile chooser activity. The boolean
      // value here has no importance and is always 'true'.
      bool open_profile_chooser = 32;

      // The event being logged indicates that the user has reached an invested level of learning
      // engagement in a lesson.
      ExplorationContext reach_invested_engagement = 34;

      // The event being logged indicates that the user switched their lesson's content language
      // using the in-lesson language switcher.
      SwitchInLessonLanguageEventContext switch_in_lesson_language = 37;

      // Indicates that something went wrong when trying to log a learner analytics even for the
      // device corresponding to the specified device ID.
      string install_id_for_failed_analytics_log = 33;

      // The event being logged is related to viewing a survey popup dialog.
      SurveyContext show_survey_popup = 38;

      // The event being logged is related to a survey session being started.
      SurveyContext begin_survey = 39;

      // The event being logged is related to a survey session being started and ended before the
      // mandatory questions are completed.
      AbandonSurveyContext abandon_survey = 40;

      // The event being logged is related to the responses to the mandatory survey questions.
      MandatorySurveyResponseContext mandatory_response = 41;

      // The event being logged is related to the response to the optional survey question.
      OptionalSurveyResponseContext optional_response = 42;

      // The event being logged indicates that the user has reached the home screen for the first time.
      CompleteAppOnboardingContext complete_app_onboarding = 44;

      // The event being logged is related to an error logged on the console logger.
      ConsoleLoggerContext console_log = 45;

      // The event being logged is a retrofit call.
      RetrofitCallContext retrofit_call_context = 46;

      // The event being logged is a retrofit call.
      RetrofitCallFailedContext retrofit_call_failed_context = 47;

      // The event being logged is related to the amount spent by the user with the app in
      // foreground.
      AppInForegroundTimeContext app_in_foreground_time = 48;

      // The event being logged contains feature flags and their current enabled and sync state.
      FeatureFlagListContext feature_flag_list_context = 43;

      // The event being logged is related to lesson progress(checkpoint) saving success.
      ExplorationContext progress_saving_success_context = 49;

      // The event being logged is related to lesson progress(checkpoint) saving failure.
      ExplorationContext progress_saving_failure_context = 50;

      // The event being logged is related to lesson progress(checkpoint) saving attempt
      // advertently(intentionally).
      ExplorationContext lesson_saved_advertently_context = 51;

      // The event being logged is related to correct answer submission after returning back to the
      // lesson.
      ExplorationContext resume_lesson_submit_correct_answer_context = 52;

      // The event being logged is related to incorrect answer submission after returning back to
      // the lesson.
      ExplorationContext resume_lesson_submit_incorrect_answer_context = 53;
    }
  }

  // Structure of a question context.
  message QuestionContext {
    // The active question ID when the event is logged.
    string question_id = 1;
    // The IDs of skills to which this question is associated.
    repeated string skill_id = 2;
  }

  // Structure of a topic context.
  message TopicContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
  }

  // Structure of a story context.
  message StoryContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
    // The active story ID when the event is logged.
    string story_id = 2;
  }

  // Structure of a concept card context.
  message ConceptCardContext {
    // The active skill ID when the event is logged.
    string skill_id = 1;
  }

  // Structure of a revision card context.
  message RevisionCardContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
    // The active sub topic ID when the event is logged.
    int32 sub_topic_id = 2;
  }

  // Represents the event context for interacting with a card within an exploration.
  message CardContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationContext exploration_details = 1;

    // The ID of skill to which this exploration card is associated.
    string skill_id = 3;
  }

  // Represents the event context for a hint related event within an exploration.
  message HintContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationContext exploration_details = 1;

    // Corresponds to the index of the index being shown or last seen.
    int32 hint_index = 4;

    reserved 2;
    reserved 3;
  }

  // Represents the event context for submitting an answer within an exploration.
  message SubmitAnswerContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationContext exploration_details = 1;

    // A stringified representation of the answer submitted by the learner.
    string stringified_answer = 2;

    // Whether the answer that the learner submitted is the correct answer.
    bool is_answer_correct = 3;
  }

  // Represents the event context for performing an action pertaining to a voiceover within an
  // exploration.
  message VoiceoverActionContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationContext exploration_details = 1;

    // This field index was previously skipped, so it's been marked as reserved to ensure no
    // possible binary compatibility issues occur in the future due to potential developer
    // confusion.
    reserved 2;

    // The content id of the voiceover recording being played.
    string content_id = 3;

    // The language code being played.
    string language_code = 4;
  }

  // Represents event context which contains learner-specific details that are logged with every
  // event.
  message LearnerDetailsContext {
    // The learner id of the current user. This id is profile-specific.
    string learner_id = 1;

    // The device id of the current device. This id is common across all profiles.
    string install_id = 2;
  }

  // Represents the event context for all exploration related events containing learner-specific and
  // exploration-specific details.
  message ExplorationContext {
    // The active classroom ID when the event is logged.
    string classroom_id = 9;

    // The active topic ID when the event is logged.
    string topic_id = 1;

    // The active story ID when the event is logged.
    string story_id = 2;

    // The active exploration ID when the event is logged.
    string exploration_id = 3;

    // The session id of the current learning session.
    string session_id = 4;

    reserved 5; // Deprecated string version of exploration version.

    // The version of the exploration.
    int32 exploration_version = 8;

    // The name of the current state of the exploration.
    string state_name = 6;

    // Defined attributes that are common among all learner analytics related event log contexts.
    LearnerDetailsContext learner_details = 7;
  }

  // Represents the event context for switching a lesson's content language mid-lesson. Note that
  // this differs from the language selection available via the options menu since the latter
  // changes the app language rather than just specifically the content language.
  message SwitchInLessonLanguageEventContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationContext exploration_details = 1;

    // The content language from which the lesson is being switched.
    OppiaLanguage switch_from_language = 2;

    // The content language to which the lesson is being switched.
    OppiaLanguage switch_to_language = 3;
  }

  // Structure of a survey context.
  message SurveyContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;

    // The active exploration ID when the event is logged.
    string exploration_id = 2;
  }

  // Represents the event context for when a survey is exited without completing all the mandatory
  // questions.
  message AbandonSurveyContext {
    // Defined attributes that are common among other survey related event log contexts.
    SurveyResponseContext survey_details = 1;

    // The semantic name of the question at which the survey was abandoned.
    SurveyQuestionName question_name = 2;
  }

  // Represents the event context that contains the responses to the mandatory survey questions.
  message MandatorySurveyResponseContext {
    // Defined attributes that are common among other survey related event log contexts.
    SurveyResponseContext survey_details = 1;

    // The semantic name of the selected answer for the user type question.
    UserTypeAnswer user_type_answer = 2;

    // The semantic name of the selected answer for the market fit question.
    MarketFitAnswer market_fit_answer = 3;

    // The integer value representing the score selected by the user for the NPS question.
    int32 nps_score_answer = 4;
  }

  // Represents the event context that contains the response to the optional survey question.
  message OptionalSurveyResponseContext {
    // Defined attributes that are common among other survey related event log contexts.
    SurveyResponseContext survey_details = 1;

    // The string value representing the free form answer given for the feedback question.
    string feedback_answer = 2;
  }

  // Structure of a survey response context.
  message SurveyResponseContext {
    // The ID of the survey for which this response event is being logged.
    string survey_id = 1;

    // The ID of the Oppia profile currently logged in, responding to the survey.
    string profile_id = 2;
  }

  // Structure for the app onboarding context.
  message CompleteAppOnboardingContext {
    // Boolean showing the app onboarding happened. The value will always be true.
    bool complete_app_onboarding = 1;
  }

  // Structure for the ConsoleLogger context
  message ConsoleLoggerContext {
    // String containing the LogLevel of the log.
    string log_level = 1;

    // String containing the tag of the error.
    string log_tag = 2;

    // String containing the full error description.
    string full_error_log = 3;
  }

  // Structure for the retrofit call context.
  message RetrofitCallContext {
    // String of the url being called.
    string request_url = 1;

    // Headers passed as part of the retrofit call.
    string headers = 2;

    // Body of the retrofit call.
    string body = 3;

    // Http response code from the call.
    int32 response_status_code = 4;
  }

  // Structure for the retrofit call failed context.
  message RetrofitCallFailedContext {
    // String of the url being called.
    string request_url = 1;

    // Headers passed as part of the retrofit call.
    string headers = 2;

    // Body of the retrofit call.
    string body = 3;

    // Response code from the call.
    int32 response_status_code = 4;

    // The error body of the failed network call
    string error_message = 5;
  }

  // Structure for the foreground time context.
  message AppInForegroundTimeContext {
    // String containing the installation id.
    string installation_id = 1;

    // String containing the app session id.
    string app_session_id = 2;

    // Foreground time in millis.
    float foreground_time = 3;
  }

  // Structure of a feature flag list context.
  message FeatureFlagListContext {
    // The client-local UUID of the user.
    string unique_user_uuid = 1;

    // The id of the current session.
    string app_session_id = 2;

    // List of Feature Flag items.
    repeated FeatureFlagItemContext feature_flags = 3;
  }

  // Structure for an individual feature flag log context.
  message FeatureFlagItemContext {
    // The name of the feature flag or sync status flag.
    string flag_name = 1;

    // The enabled state of the feature flag.
    bool flag_enabled_state = 2;

    // The sync status of the feature flag or sync status flag.
    PlatformParameter.SyncStatus flag_sync_status = 3;
  }

  // Supported priority of events for event logging
  enum Priority {
    // The undefined priority of an event
    PRIORITY_UNSPECIFIED = 0;
    // The priority of events whose logs should not be removed from the storage on most occasions
    // but can be removed if they're the only ones there and size limit exceeds.
    ESSENTIAL = 1;
    // The priority of events whose logs can be removed from the storage if the size exceeds a
    // certain limit.
    OPTIONAL = 2;
  }
}

// Structure for an exception log.
message ExceptionLog {
  // The UTC timestamp of the exception in millis.
  int64 timestamp_in_millis = 1;
  // The stacktrace of the exception explaining what went wrong
  repeated StackTraceElement stacktrace_element = 2;
  // The message explaining what failed at the site the exception was thrown.
  string message = 3;
  // The cause of the exception which in itself is a throwable.
  ExceptionLog cause = 4;
  // The type of exception indicating how that exception affected the application.
  ExceptionType exception_type = 5;

  enum ExceptionType {
    // The undefined exception type.
    EXCEPTION_TYPE_UNSPECIFIED = 0;
    // Indicates an exception that caused the application to close.
    FATAL = 1;
    // Indicates an exception that was not fatal to the application and could be recovered from.
    NON_FATAL = 2;
  }

  // Structure of the stacktrace element of an exception.
  message StackTraceElement {
    // The name of the class where the exception occurred.
    string declaring_class = 1;
    // The name of the method due to which that exception occurred.
    string method_name = 2;
    // The name of the file containing the execution point of the exception.
    string file_name = 3;
    // The line number of the source code where exception took place.
    int32 line_number = 4;
  }
}

// Structure for a container that contains event log reports.
message OppiaEventLogs {
  // Contains all event logs pending to be uploaded for analytics that are likely cached due to the
  // app not have internet connectivity at the time of wanting to originally log the event.
  repeated EventLog event_logs_to_upload = 1;

  // Contains all events that have been uploaded remotely to the analytics service. This is only
  // used for special builds of the app that have additional telemetry diagnostics enabled.
  repeated EventLog uploaded_event_logs = 2;
}

// Structure for a container that contains exception log reports.
message OppiaExceptionLogs {
  repeated ExceptionLog exception_log = 1;
}

// Data structure of device & app context that's stored on disk to be unique to each app
// installation (or cross-installation if restoring from an app backup).
message DeviceContextDatabase {
  // The per-installation UUID that can be used to generally uniquely identify this device among all
  // others present in a user study. This shouldn't be relied on for anything other than analytics,
  // and only for specific studies as the ID is not stable across app installations (but should
  // survive app data backups & restores, as well as app upgrades).
  string installation_id = 1;
}

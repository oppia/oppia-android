syntax = "proto3";

package model;

import "subtitled_html.proto";
import "subtitled_unicode.proto";
import "interaction_object.proto";
import "translation.proto";
import "voiceover.proto";

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// Structure for a single exploration.
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeExploration.kt
message Exploration {
  // The ID of the exploration.
  string id = 1;

  // Mapping from a state name to a state object
  map<string, State> states = 2;
  repeated ParamChange param_changes = 3;
  repeated ParamSpec param_specs = 4;
  string init_state_name = 5;
  string objective = 6;
  bool correctness_feedback_enabled = 7;
  string title = 8;
  string language_code = 9;
  int32 version = 10;
}

// Structure for a param change.
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeParamChange.kt
message ParamChange {
  string generator_id = 1;
  string name = 2;
  ParamChangeCustomizationArgs customization_args = 3;
}

// Structure for a param spec.
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeParamSpec.kt
message ParamSpec {
  ObjectType obj_type = 1;
}

// Supported object types for parameters.
enum ObjectType {
  OBJECT_TYPE_UNSPECIFIED = 0;
  UNICODE_STRING = 1;
}

// Structure for a single state
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeState.kt
message State {
  // The name of the State.
  string name = 1;
  // Mapping from content_id to a VoiceoverMapping
  map<string, VoiceoverMapping> recorded_voiceovers = 2;
  SubtitledHtml content = 3;
  // Mapping from content_id to a TranslationMapping
  map<string, TranslationMapping> written_translations = 4;
  repeated ParamChange param_changes = 5;
  string classifier_model_id = 6;
  Interaction interaction = 7;
  // Boolean indicating whether the creator wants to ask for answer details
  // from the learner about why they picked a particular answer while
  // playing the exploration.
  bool solicit_answer_details = 8;
}

// Structure for customization args for ParamChange objects.
message ParamChangeCustomizationArgs {
  bool parse_with_jinja = 1;
  // If the param change has only a single value, we will populate just
  // one element in this list
  repeated string list_of_values = 3;
}

// Structure for a single interaction
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeInteractionInstance.kt
message Interaction {
  string id = 1;
  repeated AnswerGroup answer_groups = 2;
  Solution solution = 3;
  reserved 4;
  repeated Hint hint = 5;
  Outcome default_outcome = 6;
  // Mapping from the name of a customization arg to the default interaction
  // object of the customization arg
  map<string, SchemaObject> customization_args = 7;
}

// Structure for schema objects. See https://github.com/oppia/oppia/blob/fcb44f8/schema_utils.py#L50 for context.
message SchemaObject {
  oneof object_type {
    bool bool_value = 1;
    CustomSchemaValue custom_schema_value = 2;
    string normalized_string = 3;
    int32 signed_int = 4;
    SchemaObjectList schema_object_list = 5;
    SubtitledHtml subtitled_html = 6;
    SubtitledUnicode subtitled_unicode = 7;
  }
}

// Structure for a list of schema object
message SchemaObjectList {
  repeated SchemaObject schema_object = 1;
}

// Structure which supports custom schemas
message CustomSchemaValue {
  oneof custom_type {
    ImageWithRegions image_with_regions = 1;
    SubtitledHtml subtitled_html = 2;
    SubtitledUnicode subtitled_unicode = 3;
    SchemaObjectMap schema_object_map = 4;
  }
}

// Structure for a map of schema objects
message SchemaObjectMap {
  map<string, SchemaObject> schema_object_map = 1;
}

// Structure for a single answer group
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeAnswerGroup.kt
message AnswerGroup {
  Misconception tagged_skill_misconception = 1;
  Outcome outcome = 2;
  repeated RuleSpec rule_specs = 3;
  repeated TrainingData training_data = 4;
}

// Structure for a single misconception, after parsing the original string received from the backend:
// https://github.com/oppia/oppia/blob/896466ae8bdd34641ea2e0031a5b9fa4243a3de7/core/templates/pages/
// exploration-editor-page/editor-tab/templates/modal-templates/add-answer-group-modal.controller.ts#L60
message Misconception {
  // Skill ID parsed from the misconception.
  string skill_id = 1;
  // Misconception ID parsed from the misconception.
  string misconception_id = 2;
}

// Structure for a single training data instance
message TrainingData {
  int32 answer_group_index = 1;
  repeated string answers = 2;
}

// Structure for a single solution
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeSolution.kt
message Solution {
  string interaction_id = 1;
  // Flag that is true if correct_answer is the only correct answer of the question.
  bool answer_is_exclusive = 2;
  // correct_answer of the State.
  CorrectAnswer correct_answer = 3;
  // Core explanation to the correct answer.
  SubtitledHtml explanation = 4;
  // To check if the solution was revealed or not by the learner.
  bool solution_is_revealed = 5;
}

// Structure for a Correct answer in Solution
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeSolution.kt
message CorrectAnswer {
  int32 denominator = 1;
  int32 numerator = 2;
  int32 whole_number = 3;
  bool is_negative = 4;
  string correct_answer = 5;
}

// Structure for a single hint
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeHint.kt
message Hint {
  // Hint data.
  SubtitledHtml hint_content = 1;
  // To check if the hint was revealed or not
  bool hint_is_revealed = 2;
  // The current state that is display to the user.
  State state = 3;
}

// Structure for a single outcome
// Maps from: data/src/main/java/org/oppia/android/android/data/backends/gae/model/GaeOutcome.kt
message Outcome {
  string dest_state_name = 1;
  string refresher_exploration_id = 2;
  SubtitledHtml feedback = 3;
  repeated ParamChange param_changes = 4;
  string missing_prerequisite_skill_id = 5;
  bool labelled_as_correct = 6;
}

// Structure for a single rule spec
message RuleSpec {
  // Mapping from the name of the rule template to the value of the rule template.
  // The keys and values for this map can be deduced from
  // https://github.com/oppia/oppia/blob/develop/extensions/interactions/rule_templates.json
  map<string, InteractionObject> input = 1;
  string rule_type = 2;
}

/* The following structures are specific to ephemeral exploration sessions and should never be persisted on disk. */

// Corresponds to an exploration state that exists ephemerally in the UI and will disappear once the user finishes the
// exploration or navigates away from it. This model contains additional information to help the UI display an exact
// representation of their interaction with the lesson.
message EphemeralState {
  // The actual state to display to the user.
  State state = 1;

  // Whether there is a state prior to this one that the learner has already completed, or if this is the initial state
  // of the exploration.
  bool has_previous_state = 2;

  // Whether this specific state has an upcoming state that the learner can navigate to (indicating that this is not
  // the state at the top of the current state deck).
  bool has_next_state = 3;

  // Different types this state can take depending on whether the learner needs to finish an existing card, has
  // navigated to a previous card, or has reached the end of the exploration.
  oneof state_type {
    // A pending state that requires a correct answer to continue.
    PendingState pending_state = 4;

    // A previous state completed by the learner.
    CompletedState completed_state = 5;

    // This value is always true in the case where the state type is terminal. This type may change in the future to a
    // message structure if additional data needs to be passed along to the terminal state card.
    bool terminal_state = 6;
  }

  // The current status of checkpointing the exploration.
  CheckpointState checkpoint_state = 7;
}

// Corresponds to an exploration state that hasn't yet had a correct answer filled in.
message PendingState {
  // A list of previous wrong answers that led back to this state, and Oppia's responses. These responses are in the
  // order the learner submitted them.
  repeated AnswerAndResponse wrong_answer = 1;
  // A list of hints.
  repeated Hint hint = 2;
}

// Corresponds to an exploration state that the learner has previous completed.
message CompletedState {
  // The list of answers and responses that were used to finish this state. These answers are in the order that the
  // learner submitted them, so the last answer is guaranteed to be the correct answer.
  repeated AnswerAndResponse answer = 1;
}

// Corresponds to an answer that the user has submitted.
message UserAnswer {
  // The submitted answer.
  InteractionObject answer = 1;
  // A user-friendly textual representation of the answer.
  oneof textual_answer {
    // An HTML textual representation of the answer.
    string html_answer = 2;
    // A plaintext representation of the answer.
    string plain_answer = 3;
    // A list of HTML textual representation of the answer.
    ListOfSetsOfHtmlStrings list_of_html_answers = 4;
  }
  // An accessible version of the corresponding plain answer. It will be used to read out the
  // answer when there is a screen-reader enabled. Also when this is value is not initialized and
  // if the screen-reader is enabled in that case the plain answer/html answer would be read out.
  string content_description = 5;
}

message AnswerAndResponse {
  // A previous answer the learner submitted.
  UserAnswer user_answer = 1;

  // Oppia's response to the answer the learner submitted.
  SubtitledHtml feedback = 2;
}

message AnswerOutcome {
  // Oppia's feedback to the learner's most recent answer.
  SubtitledHtml feedback = 1;

  // Whether the answer the learner submitted is the correct answer. Note that this is only an indication of the
  // correctness, and not all correct answers are guaranteed to be labelled as correct.
  bool labelled_as_correct_answer = 2;

  // The State the answer was submitted in (to help downstream observers make decisions based on the State without
  // needing to synchronize with other data providers).
  State state = 3;

  // One of several destinations the learner should be routed to as a result of submitting this answer.
  oneof destination {
    // Indicates that the learner should not progress past the current state.
    bool same_state = 4;

    // Indicates that the learner should move to the next state. This contains the name of that state, but this isn't
    // meant to be used by the UI directly beyond for logging purposes.
    string state_name = 5;

    // Indicates that the learner should be shown a concept card corresponding to the specified skill ID to refresh the
    // concept before proceeding.
    string missing_prerequisite_skill_id = 6;

    // Indicates that the learner needs to play the specified exploration ID to refresh missing topics and then return
    // to restart the current exploration.
    string refresher_exploration_id = 7;
  }
}

// A structure corresponding to the index of a hint or solution in a state. This structure is set up
// to properly account for variable numbers of hints, for cases when only a solution or no solution
// exists, and for when there are no hints or solutions.
message HelpIndex {
  // This type is uninitialized in cases when no index is currently available (either because a hint
  // or solution hasn't yet been triggered, or because there are none to trigger).
  oneof index_type {
    // Indicates this help index corresponds to the index of a hint within the hint list of a state.
    int32 hint_index = 1;

    // Indicates this help index corresponds to the solution of a state. The boolean value here has
    // no importance and is always 'true'.
    bool show_solution = 2;

    // Indicates that everything available has been revealed. Note that this is different than the
    // case when there are no hints or solutions to trigger, even though the resulting behavior may
    // be different. This case specifically indicates that all hints and the solution, if present,
    // have been revealed and there's no other help to provide. The boolean value here has no
    // importance and is always 'true'.
    bool everything_revealed = 3;
  }
}

// Different states in which exploration checkpoint can exist.
enum CheckpointState {
  // The state of checkpoint is unknown.
  CHECKPOINT_STATE_UNSPECIFIED = 0;

  // Progress made in the exploration is saved and the size of the checkpoint database has
  // not exceeded the allocated limit.
  CHECKPOINT_SAVED_DATABASE_NOT_EXCEEDED_LIMIT = 1;

  // Progress made in the exploration is saved and the size of the checkpoint database has
  // exceeded the allocated limit.
  CHECKPOINT_SAVED_DATABASE_EXCEEDED_LIMIT = 2;

  // Progress made in the exploration is not saved.
  CHECKPOINT_UNSAVED = 3;
}

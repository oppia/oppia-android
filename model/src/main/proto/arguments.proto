syntax = "proto3";

package model;

import "exploration.proto";
import "exploration_checkpoint.proto";
import "languages.proto";
import "profile.proto";
import "translation.proto";

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// The fragment arguments passed to instances of ExitProfileDialogFragment.
message ExitProfileDialogArguments {
  // Decides the correct menu item to be highlighted after canceling the ExitProfileDialogFragment.
  HighlightItem highlight_item = 1;
}

// Represents the type of item/menuItem that should be highlighted after canceling the
// ExitProfileDialogFragment.
enum HighlightItem {
  // Indicates that the highlight item was not set
  ITEM_UNSPECIFIED = 0;

  // Indicates that none of the items needs to be highlighted.
  NONE = 1;

  // Indicates that one of the NavigationDrawerItem needs to be highlighted.
  LAST_CHECKED_MENU_ITEM = 2;

  // Indicates that the Administrator Controls item needs to be highlighted.
  ADMINISTRATOR_CONTROLS_ITEM = 3;

  // Indicates that the Developer Options item needs to be highlighted.
  DEVELOPER_OPTIONS_ITEM = 4;
}

// TODO(#59): Isolate this to a test-only proto once possible.
// Represents the parameters needed to create InputInteractionViewTestActivity.
message InputInteractionViewTestActivityParams {
  // Corresponds to the interaction used to initialize the interaction's view in the test
  // environment.
  Interaction interaction = 1;

  // Corresponds to the translation context which may affect the interaction's classifiers during
  // tests.
  WrittenTranslationContext written_translation_context = 2;
}

// TODO(#59): Isolate this to a test-only proto once possible.
// Represents the parameters needed to open MathExpressionInteractionsViewTestActivity.
message MathExpressionInteractionsViewTestActivityParams {
  // Corresponds to the interaction used to initialize the interaction's view in the test
  // environment.
  Interaction interaction = 1;

  // Corresponds to the translation context which may affect the interaction's classifiers during
  // tests.
  WrittenTranslationContext written_translation_context = 2;

  // Indicates that a math interaction should be displayed for this activity, and indicates which
  // one is being used in tests.
  MathInteractionType math_interaction_type = 3;

  // The type of math interaction to initialize for testing.
  enum MathInteractionType {
    // Indicates that no math interaction should  be loaded for testing.
    MATH_INTERACTION_TYPE_UNSPECIFIED = 0;

    // Indicates that the numeric expression input interaction will be used for testing.
    NUMERIC_EXPRESSION = 1;

    // Indicates that the algebraic expression input interaction will be used for testing.
    ALGEBRAIC_EXPRESSION = 2;

    // Indicates that the math equation input interaction will be used for testing.
    MATH_EQUATION = 3;
  }
}

// Corresponds to intent extras of destination activity.
message DestinationScreen {
  // Indicates destination screen which we send in intent extras with RecentlyPlayedActivityParams.
  oneof destination_screen {
    // Indicates information about the RecentlyPlayedActivity.
    RecentlyPlayedActivityParams recently_played_activity_params = 1;
  }
}

// Intent extras for RecentlyPlayedActivity.
message RecentlyPlayedActivityParams {
  // The ID of current profile.
  ProfileId profile_id = 1;

  // The title which should be displayed for the activity.
  RecentlyPlayedActivityTitle activity_title = 2;
}

// Corresponds to activity title of RecentlyPlayedActivity.
enum RecentlyPlayedActivityTitle {
  // Activity title is not specified.
  TITLE_UNSPECIFIED = 0;

  // Corresponds to activity title as "Recently played stories".
  RECENTLY_PLAYED_STORIES = 1;

  // Corresponds to activity title as "Stories for you".
  STORIES_FOR_YOU = 2;

  // Corresponds to activity title as "Recommended Stories".
  RECOMMENDED_STORIES = 3;

  // Corresponds to activity title as "Last-Played Stories".
  LAST_PLAYED_STORIES = 4;
}

// Params required when creating a new ExplorationActivity.
message ExplorationActivityParams {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 7;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The screen from which this activity was opened.
  ParentScreen parent_screen = 5;

  // Indicates whether checkpointing is enabled to story partial completion state for this session.
  bool is_checkpointing_enabled = 6;

  // Different parent screens that can open a new exploration activity instance.
  enum ParentScreen {
    // Indicates that the originating screen isn't actually known.
    PARENT_SCREEN_UNSPECIFIED = 0;

    // Corresponds to the lessons tab on the topic viewer screen.
    TOPIC_SCREEN_LESSONS_TAB = 1;

    // Corresponds to the story viewer screen.
    STORY_SCREEN = 2;
  }
}

// Arguments that must be passed to a new ExplorationFragment.
message ExplorationFragmentArguments {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 6;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The text size at which content in the exploration should be rendered.
  ReadingTextSize reading_text_size = 5;
}

// Params required when creating a new ResumeLessonActivity.
message ResumeLessonActivityParams {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 7;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The screen from which this activity was opened.
  ExplorationActivityParams.ParentScreen parent_screen = 5;

  // The checkpoint that may be used to resume the exploration play session.
  ExplorationCheckpoint checkpoint = 6;
}

// Arguments that must be passed to a new ResumeLessonFragment.
message ResumeLessonFragmentArguments {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 7;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The screen from which this activity was opened.
  ExplorationActivityParams.ParentScreen parent_screen = 5;

  // The checkpoint that may be used to resume the exploration play session.
  ExplorationCheckpoint checkpoint = 6;

  // The text size at which content in the resume lesson should be rendered.
  ReadingTextSize reading_text_size = 8;
}

// Params required when creating a new ReadingTextSizeActivity.
message ReadingTextSizeActivityParams {
  // The ReadingTextSize previously selected by the user (upon opening the activity).
  ReadingTextSize reading_text_size = 1;
}

// The bundle of properties that are saved upon configuration changes in ReadingTextSizeActivity.
message ReadingTextSizeActivityStateBundle {
  // The ReadingTextSize selected by the user.
  ReadingTextSize selected_reading_text_size = 1;
}

// The bundle of properties that are returned by ReadingTextSizeActivity after it's finished.
message ReadingTextSizeActivityResultBundle {
  // The ReadingTextSize selected by the user.
  ReadingTextSize selected_reading_text_size = 1;
}

// Arguments required when creating a new ReadingTextSizeFragment.
message ReadingTextSizeFragmentArguments {
  // The ReadingTextSize previously selected by the user (upon opening the fragment).
  ReadingTextSize reading_text_size = 1;
}

// The bundle of properties that are saved upon configuration changes in ReadingTextSizeFragment.
message ReadingTextSizeFragmentStateBundle {
  // The ReadingTextSize selected by the user.
  ReadingTextSize selected_reading_text_size = 1;
}

// Params required when creating a new AudioLanguageActivity.
message AudioLanguageActivityParams {
  // The default audio language previously selected by the user (upon opening the activity).
  AudioLanguage audio_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AudioLanguageActivity.
message AudioLanguageActivityStateBundle {
  // The default audio language selected by the user.
  AudioLanguage audio_language = 1;
}

// The bundle of properties that are returned by AudioLanguageActivity after it's finished.
message AudioLanguageActivityResultBundle {
  // The new default audio language selected by the user.
  AudioLanguage audio_language = 1;
}

// Arguments required when creating a new AudioLanguageFragment.
message AudioLanguageFragmentArguments {
  // The default audio language previously selected by the user (upon opening the fragment).
  AudioLanguage audio_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AudioLanguageFragment.
message AudioLanguageFragmentStateBundle {
  // The default audio language selected by the user.
  AudioLanguage audio_language = 1;
}

// Activity Parameters needed to create the policy page.
message PoliciesActivityParams {
  // The specific policy page that should be displayed.
  PolicyPage policy_page = 1;
}

// Fragment arguments needed to create the policy page.
message PoliciesFragmentArguments {
  // The specific policy page that should be displayed.
  PolicyPage policy_page = 1;
}

// Represents the type of policy page.
enum PolicyPage {
  // The policy page is unknown.
  POLICY_PAGE_UNSPECIFIED = 0;

  // Corresponds to the Privacy Policy page.
  PRIVACY_POLICY = 1;

  // Corresponds to the Terms of Service page.
  TERMS_OF_SERVICE = 2;
}

// Arguments required when creating a new AppLanguageFragment.
message AppLanguageFragmentArguments {
  // The default app language previously selected by the user (upon opening the fragment).
  OppiaLanguage oppia_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AppLanguageFragment.
message AppLanguageFragmentStateBundle {
  // The default app language selected by the user.
  OppiaLanguage oppia_language = 1;
}

// Params required when creating a new AppLanguageActivity.
message AppLanguageActivityParams {
  // The default app language previously selected by the user (upon opening the activity).
  OppiaLanguage oppia_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AppLanguageActivity.
message AppLanguageActivityStateBundle {
  // The default app language selected by the user.
  OppiaLanguage oppia_language = 1;
}

// Represents the parameters needed to create SurveyActivity.
message SurveyActivityParams {
  // The ID of the profile for which the survey is to be shown.
  ProfileId profile_id = 1;

  // The ID of the topic to which the triggering exploration belongs.
  string topic_id = 2;

  // The ID of the triggering exploration.
  string exploration_id = 3;
}

// Arguments required when creating a QuestionPlayerFragment.
message QuestionPlayerFragmentArguments{
  // The ID of current profile.
  ProfileId profile_id = 1;

  // The ReadingTextSize previously selected by the user (upon opening the fragment).
  ReadingTextSize reading_text_size = 2;
}

// Represents the parameters needed to create TopicActivity.
message TopicActivityParams {
  // The ID of the classroom to which the topic to be loaded belongs.
  string classroom_id = 3;

  // The ID of the topic to be loaded.
  string topic_id = 1;

  // The ID of the story to to be loaded.
  string story_id = 2;
}

// Arguments required when creating a TopicFragment.
message TopicFragmentArguments {
  // The ID of the classroom to which the topic to be loaded belongs.
  string classroom_id = 3;

  // The ID of the topic to be loaded.
  string topic_id = 1;

  // The ID of the story to to be loaded.
  string story_id = 2;
}

// Represents the parameters needed to create QuestionPlayerActivity.
message QuestionPlayerActivityParams {
  // Skill ID list for practice.
  repeated string skill_ids = 1;
}

// The bundle of properties that are saved upon configuration changes in AdministratorControlActivity.
message AdministratorControlActivityStateBundle {
  // Title for the loaded fragment.
  string selected_controls_title = 1;

  // Represents last loaded fragment.
  string last_loaded_fragment = 2;

  // Represents profile deletion dialog visibility.
  bool is_profile_deletion_dialog_visible = 3;

  // Represents the profile ID of the current profile.
  int32 selected_profile_id = 4;
}

// Arguments required when creating an AdministratorControlsFragment.
message AdministratorControlsFragmentArguments {
  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 1;
}

// Represents the parameters needed to create MarkChaptersCompletedTestActivity.
message MarkChaptersCompletedTestActivityParams {
  // The ID of the profile that wants to mark chapters as completed.
  int32 internal_profile_id = 1;

  // The value indicates whether to show a confirmation dialog or not.
  bool show_confirmation_notice = 2;
}

// Represents the parameters needed to create MarkChaptersCompletedActivity.
message MarkChaptersCompletedActivityParams {
  // The ID of the profile that wants to mark chapters as completed.
  int32 internal_profile_id = 1;

  // The value indicates whether to show a confirmation dialog or not.
  bool show_confirmation_notice = 2;
}

// Arguments required when creating a MarkChaptersCompletedFragment.
message MarkChaptersCompletedFragmentArguments {
  // The ID of the profile that wants to mark chapters as completed.
  int32 internal_profile_id = 1;

  // The value indicates whether to show a confirmation dialog or not.
  bool show_confirmation_notice = 2;
}

// The bundle of properties that are saved upon configuration changes in MarkChaptersCompletedFragment.
message MarkChaptersCompletedFragmentStateBundle {
  // List of selected exploration IDs.
  repeated string exploration_ids = 1;

  // List of selected exploration titles.
  repeated string exploration_titles = 2;
}

// The bundle of properties that are saved upon configuration changes in MarkStoriesCompletedFragment.
message MarkStoriesCompletedFragmentStateBundle {
  // List of selected story IDs.
  repeated string story_ids = 1;
}

// The bundle of properties that are saved upon configuration changes in MarkTopicsCompletedFragment.
message MarkTopicsCompletedFragmentStateBundle {
  // List of selected topic IDs.
  repeated string topic_ids = 1;
}

// Represents the parameters needed to create FAQSingleActivity.
message FAQSingleActivityParams {
  // The question to be displayed.
  string question = 1;

  // The answer to be displayed.
  string answer = 2;
}

// Represents the parameters needed to create LicenseListActivity.
message LicenseListActivityParams {
  // Dependency index for a third-party dependency.
  int32 dependency_index = 1;
}

// Arguments required when creating a LicenseListFragment.
message LicenseListFragmentArguments {
  // Dependency index for a third-party dependency.
  int32 dependency_index = 1;

  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 2;
}

// Represents the parameters needed to create LicenseTextViewerActivity.
message LicenseTextViewerActivityParams {
  // Dependency index for a third-party dependency.
  int32 dependency_index = 1;

  // License index for a copyright license.
  int32 license_index = 2;
}

// Arguments required when creating a LicenseTextViewerFragment.
message LicenseTextViewerFragmentArguments {
  // Dependency index for a third-party dependency.
  int32 dependency_index = 1;

  // License index for a copyright license.
  int32 license_index = 2;
}

// Arguments required when creating a ThirdPartyDependencyListFragment.
message ThirdPartyDependencyListFragmentArguments {
  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 1;
}

// Represents the parameters needed to create HelpActivity.
message HelpActivityParams {
  // Represents whether the user navigated to the HelpActivity through the navigation drawer or not.
  bool is_from_navigation_drawer = 1;
}

// The bundle of properties that are saved upon configuration changes in HelpActivity.
message HelpActivityStateBundle {
  // Title for loaded fragment.
  string help_options_title = 1;

  // The loaded fragment's tag.
  string selected_fragment_tag = 2;

  // Selected dependency index from third-party dependencies.
  int32 selected_dependency_index = 3;

  // Selected license index from copyright licenses.
  int32 selected_license_index = 4;

  // Arguments for creating the Policy page.
  PoliciesActivityParams policies_activity_params = 5;
}

// Arguments required when creating a HelpFragment.
message HelpFragmentArguments {
  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 1;
}

// Represents the parameters needed to create OptionsActivity.
message OptionsActivityParams {
  // Represents whether the user navigated to the OptionsActivity through the navigation drawer or not.
  bool is_from_navigation_drawer = 1;
}

// The bundle of properties that are saved upon configuration changes in OptionsActivity.
message OptionsActivityStateBundle {
  // Title for loaded fragment.
  string selected_options_title = 1;

  // Stores the identifier of the currently selected fragment.
  string selected_fragment = 2;
}

// Arguments required when creating an OptionsFragment.
message OptionsFragmentArguments {
  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 1;

  // Indicates whether to load the default fragment or not.
  bool is_first_open = 2;

  // Stores the identifier of the currently selected fragment.
  string selected_fragment = 3;
}

// Arguments required when creating a HintsAndSolutionDialogFragment.
message HintsAndSolutionDialogFragmentArguments {
  // Id Used in ExplorationController/QuestionAssessmentProgressController to get current state data.
  string id_argument = 1;

  // The [State] being viewed by the learner.
  State state = 2;

  // [HelpIndex] corresponding to the current hints/solution configuration.
  HelpIndex help_index = 3;

  // [WrittenTranslationContext] needed to translate the hints/solution.
  WrittenTranslationContext written_translation_context = 4;
}

// The bundle of properties that are saved upon configuration changes in HintsAndSolutionDialogFragment.
message HintsAndSolutionDialogFragmentStateBundle {
  // List of expanded items.
  repeated int32 current_expanded_items = 1;

  // Index of hint.
  int32 hint_index = 2;

  // Indicates whether hint is revealed or not.
  bool is_hint_revealed = 3;

  // Solution index.
  int32 solution_index = 4;

  // Indicates whether solution is revealed or not.
  bool is_solution_revealed = 5;
}

// Arguments required when creating a LanguageDialogFragment.
message LanguageDialogFragmentArguments {
  // List of strings containing languages.
  repeated string languages = 1;

  // Selected index from language list.
  int32 selected_index = 2;
}

// Represents the parameters needed to create StateFragmentTestActivity.
message StateFragmentTestActivityParams {
  // The ID of the current profile.
  int32 internal_profile_id = 1;

  // The ID of the classroom to which the triggering exploration belongs.
  string classroom_id = 6;

  // The ID of the topic to which the triggering exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the triggering exploration belongs.
  string story_id = 3;

  // The ID of the triggering exploration.
  string exploration_id = 4;

  // Indicates whether to save partial progress or not.
  bool should_save_partial_progress = 5;
}

// Arguments required when creating a StateFragment.
message StateFragmentArguments {
  // The ID of the current profile.
  int32 internal_profile_id = 1;

  // The ID of the topic to which the triggering exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the triggering exploration belongs.
  string story_id = 3;

  // The ID of the triggering exploration.
  string exploration_id = 4;
}

// Arguments required when creating a ProgressDatabaseFullDialogFragment.
message ProgressDatabaseFullDialogFragmentArguments {
  // Oldest checkpoint exploration title.
  string oldest_saved_exploration_title = 1;
}

// Represents the parameters needed to create AddProfileActivity.
message AddProfileActivityParams {
  // Color for the new profile that is not already in use.
  int32 color_rgb = 1;
}

// Represents the parameters needed to create AdminAuthActivity.
message AdminAuthActivityParams {
  // Admin pin.
  string admin_pin = 1;

  // ID of the current profile.
  int32 internal_profile_id = 2;

  // Color of the profile avatar.
  int32 color_rgb = 3;

  // Represents different activities from which AdminPinActivity can be opened.
  int32 admin_pin_enum = 4;
}

// Represents the parameters needed to create AdminPinActivity.
message AdminPinActivityParams {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // Color of the profile avatar.
  int32 color_rgb = 2;

  // Represents different activities from which AdminPinActivity can be opened.
  int32 admin_pin_enum = 3;
}

// Arguments required when creating an AdminSettingsDialogFragment.
message AdminSettingsDialogFragmentArguments {
  // Admin pin.
  string admin_pin = 1;
}

// Represents the parameters needed to create PinPasswordActivity.
message PinPasswordActivityParams {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // Admin pin.
  string admin_pin = 2;
}

// Arguments required when creating a ResetPinDialogFragment.
message ResetPinDialogFragmentArguments {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // Current profile name.
  string name = 2;
}

// Represents the parameters needed to create ProfileEditActivity.
message ProfileEditActivityParams {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 2;
}

// Arguments required when creating a ProfileEditFragment.
message ProfileEditFragmentArguments {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 2;
}

// Arguments required when creating a ProfileListFragment.
message ProfileListFragmentArguments {
  // The value indicates whether the layout is multipane or not.
  bool is_multipane = 1;
}

// Represents the parameters needed to create ProfileResetPinActivity.
message ProfileResetPinActivityParams {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // Indicates whether current user is admin or not.
  bool is_admin = 2;
}

// Arguments required when creating a ProfileResetPinFragment.
message ProfileResetPinFragmentArguments {
  // ID of the current profile.
  int32 internal_profile_id = 1;

  // Indicates whether current user is admin or not.
  bool is_admin = 2;
}

// Represents the parameters needed to create StoryActivity.
message StoryActivityParams {
  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 3;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 2;
}

// Arguments required when creating a StoryFragment.
message StoryFragmentArguments {
  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 3;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 2;
}

// Arguments required when creating a ConceptCardFragment.
message ConceptCardFragmentArguments {
  // The ID of the skill to which the opening exploration belongs.
  string skill_id = 1;
}

// Arguments required when creating an TopicInfoFragment.
message TopicInfoFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;
}

// Arguments required when creating a TopicLessonsFragment.
message TopicLessonsFragmentArguments {
  // The ID of the classroom to which the opening exploration belongs.
  string classroom_id = 3;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 2;
}

// The bundle of properties that are saved upon configuration changes in TopicLessonsFragment.
message TopicLessonsFragmentStateBundle {
  // Index of expanded chapter.
  int32 current_expanded_chapter_list_index = 1;

  // Indicates whether default story is expanded or not.
  bool is_default_story_expanded = 2;
}

// Arguments required when creating a TopicPracticeFragment.
message TopicPracticeFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;
}

// The bundle of properties that are saved upon configuration changes in TopicPracticeFragment.
message TopicPracticeFragmentStateBundle {
  // List of selected sub topic id lists.
  repeated int32 subtopic_ids = 1;

  // Hash map of selected skill id list.
  map<int32, StringList> skill_ids = 2;

  message StringList {
    repeated string values = 1;
  }
}

// Arguments required when creating a TopicRevisionFragment.
message TopicRevisionFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;
}

// Represents the parameters needed to create RevisionCardActivity.
message RevisionCardActivityParams {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the sub topic to which the opening exploration belongs.
  int32 subtopic_id = 2;

  // The sub topic list size.
  int32 subtopic_list_size = 3;
}

// Arguments required when creating a RevisionCardFragment.
message RevisionCardFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the sub topic to which the opening exploration belongs.
  int32 subtopic_id = 2;

  // The sub topic list size.
  int32 subtopic_list_size = 3;

  // The text size at which content in the revision card should be rendered.
  ReadingTextSize reading_text_size = 7;
}

// Represents the parameters needed to create TestFontScaleConfigurationUtilActivity.
message TestFontScaleConfigurationUtilActivityParams {
  // The text size at which content in the exploration should be rendered.
  ReadingTextSize reading_text_size = 1;
}

// Arguments required when creating a SurveyFragment.
message SurveyFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the triggering exploration.
  string exploration_id = 2;
}

// Arguments required when creating a SurveyWelcomeDialogFragment.
message SurveyWelcomeDialogFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;

  // The ID of the triggering exploration.
  string exploration_id = 2;

  // List of survey questions.
  repeated int32 questions = 3;
}

// Arguments required when creating a WalkthroughFinalFragment.
message WalkthroughFinalFragmentArguments {
  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 1;
}

// Params required when creating a new IntroActivity.
message IntroActivityParams {
  // The nickname associated with a newly created profile.
  string profile_nickname = 1;
}

syntax = "proto3";

package model;

import "exploration.proto";
import "exploration_checkpoint.proto";
import "languages.proto";
import "profile.proto";
import "translation.proto";

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// The fragment arguments passed to instances of ExitProfileDialogFragment.
message ExitProfileDialogArguments {
  // Decides the correct menu item to be highlighted after canceling the ExitProfileDialogFragment.
  HighlightItem highlight_item = 1;
}

// Represents the type of item/menuItem that should be highlighted after canceling the
// ExitProfileDialogFragment.
enum HighlightItem {
  // Indicates that the highlight item was not set
  ITEM_UNSPECIFIED = 0;

  // Indicates that none of the items needs to be highlighted.
  NONE = 1;

  // Indicates that one of the NavigationDrawerItem needs to be highlighted.
  LAST_CHECKED_MENU_ITEM = 2;

  // Indicates that the Administrator Controls item needs to be highlighted.
  ADMINISTRATOR_CONTROLS_ITEM = 3;

  // Indicates that the Developer Options item needs to be highlighted.
  DEVELOPER_OPTIONS_ITEM = 4;
}

// TODO(#59): Isolate this to a test-only proto once possible.
// Represents the parameters needed to open InputInteractionViewTestActivity.
message InputInteractionViewTestActivityParams {
  // Corresponds to the interaction used to initialize the interaction's view in the test
  // environment.
  Interaction interaction = 1;

  // Corresponds to the translation context which may affect the interaction's classifiers during
  // tests.
  WrittenTranslationContext written_translation_context = 2;

  // Indicates that a math interaction should be displayed for this activity, and indicates which
  // one is being used in tests.
  MathInteractionType math_interaction_type = 3;

  // The type of math interaction to initialize for testing.
  enum MathInteractionType {
    // Indicates that no math interaction should  be loaded for testing.
    MATH_INTERACTION_TYPE_UNSPECIFIED = 0;

    // Indicates that the numeric expression input interaction will be used for testing.
    NUMERIC_EXPRESSION = 1;

    // Indicates that the algebraic expression input interaction will be used for testing.
    ALGEBRAIC_EXPRESSION = 2;

    // Indicates that the math equation input interaction will be used for testing.
    MATH_EQUATION = 3;
  }
}

// Corresponds to intent extras of destination activity.
message DestinationScreen {
  // Indicates destination screen which we send in intent extras with RecentlyPlayedActivityParams.
  oneof destination_screen {
    // Indicates information about the RecentlyPlayedActivity.
    RecentlyPlayedActivityParams recently_played_activity_params = 1;
  }
}

// Intent extras for RecentlyPlayedActivity.
message RecentlyPlayedActivityParams {
  // The ID of current profile.
  ProfileId profile_id = 1;

  // The title which should be displayed for the activity.
  RecentlyPlayedActivityTitle activity_title = 2;
}

// Corresponds to activity title of RecentlyPlayedActivity.
enum RecentlyPlayedActivityTitle {
  // Activity title is not specified.
  TITLE_UNSPECIFIED = 0;

  // Corresponds to activity title as "Recently played stories".
  RECENTLY_PLAYED_STORIES = 1;

  // Corresponds to activity title as "Stories for you".
  STORIES_FOR_YOU = 2;

  // Corresponds to activity title as "Recommended Stories".
  RECOMMENDED_STORIES = 3;

  // Corresponds to activity title as "Last-Played Stories".
  LAST_PLAYED_STORIES = 4;
}

// Params required when creating a new ExplorationActivity.
message ExplorationActivityParams {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The screen from which this activity was opened.
  ParentScreen parent_screen = 5;

  // Indicates whether checkpointing is enabled to story partial completion state for this session.
  bool is_checkpointing_enabled = 6;

  // Different parent screens that can open a new exploration activity instance.
  enum ParentScreen {
    // Indicates that the originating screen isn't actually known.
    PARENT_SCREEN_UNSPECIFIED = 0;

    // Corresponds to the lessons tab on the topic viewer screen.
    TOPIC_SCREEN_LESSONS_TAB = 1;

    // Corresponds to the story viewer screen.
    STORY_SCREEN = 2;
  }
}

// Arguments that must be passed to a new ExplorationFragment.
message ExplorationFragmentArguments {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The text size at which content in the exploration should be rendered.
  ReadingTextSize reading_text_size = 5;
}

// Params required when creating a new ResumeLessonActivity.
message ResumeLessonActivityParams {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The screen from which this activity was opened.
  ExplorationActivityParams.ParentScreen parent_screen = 5;

  // The checkpoint that may be used to resume the exploration play session.
  ExplorationCheckpoint checkpoint = 6;
}

// Arguments that must be passed to a new ResumeLessonFragment.
message ResumeLessonFragmentArguments {
  // The ID of the profile that wants to start an exploration play session.
  ProfileId profile_id = 1;

  // The ID of the topic to which the opening exploration belongs.
  string topic_id = 2;

  // The ID of the story to which the opening exploration belongs.
  string story_id = 3;

  // The exploration being opened for a new play session.
  string exploration_id = 4;

  // The screen from which this activity was opened.
  ExplorationActivityParams.ParentScreen parent_screen = 5;

  // The checkpoint that may be used to resume the exploration play session.
  ExplorationCheckpoint checkpoint = 6;
}

// Params required when creating a new ReadingTextSizeActivity.
message ReadingTextSizeActivityParams {
  // The ReadingTextSize previously selected by the user (upon opening the activity).
  ReadingTextSize reading_text_size = 1;
}

// The bundle of properties that are saved upon configuration changes in ReadingTextSizeActivity.
message ReadingTextSizeActivityStateBundle {
  // The ReadingTextSize selected by the user.
  ReadingTextSize selected_reading_text_size = 1;
}

// The bundle of properties that are returned by ReadingTextSizeActivity after it's finished.
message ReadingTextSizeActivityResultBundle {
  // The ReadingTextSize selected by the user.
  ReadingTextSize selected_reading_text_size = 1;
}

// Arguments required when creating a new ReadingTextSizeFragment.
message ReadingTextSizeFragmentArguments {
  // The ReadingTextSize previously selected by the user (upon opening the fragment).
  ReadingTextSize reading_text_size = 1;
}

// The bundle of properties that are saved upon configuration changes in ReadingTextSizeFragment.
message ReadingTextSizeFragmentStateBundle {
  // The ReadingTextSize selected by the user.
  ReadingTextSize selected_reading_text_size = 1;
}

// Params required when creating a new AudioLanguageActivity.
message AudioLanguageActivityParams {
  // The default audio language previously selected by the user (upon opening the activity).
  AudioLanguage audio_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AudioLanguageActivity.
message AudioLanguageActivityStateBundle {
  // The default audio language selected by the user.
  AudioLanguage audio_language = 1;
}

// The bundle of properties that are returned by AudioLanguageActivity after it's finished.
message AudioLanguageActivityResultBundle {
  // The new default audio language selected by the user.
  AudioLanguage audio_language = 1;
}

// Arguments required when creating a new AudioLanguageFragment.
message AudioLanguageFragmentArguments {
  // The default audio language previously selected by the user (upon opening the fragment).
  AudioLanguage audio_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AudioLanguageFragment.
message AudioLanguageFragmentStateBundle {
  // The default audio language selected by the user.
  AudioLanguage audio_language = 1;
}

// Activity Parameters needed to open the policy page.
message PoliciesActivityParams {
  // The specific policy page that should be displayed.
  PolicyPage policy_page = 1;
}

// Fragment arguments needed to open the policy page.
message PoliciesFragmentArguments {
  // The specific policy page that should be displayed.
  PolicyPage policy_page = 1;
}

// Represents the type of policy page.
enum PolicyPage {
  // The policy page is unknown.
  POLICY_PAGE_UNSPECIFIED = 0;

  // Corresponds to the Privacy Policy page.
  PRIVACY_POLICY = 1;

  // Corresponds to the Terms of Service page.
  TERMS_OF_SERVICE = 2;
}

// Arguments required when creating a new AppLanguageFragment.
message AppLanguageFragmentArguments {
  // The default app language previously selected by the user (upon opening the fragment).
  OppiaLanguage oppia_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AppLanguageFragment.
message AppLanguageFragmentStateBundle {
  // The default app language selected by the user.
  OppiaLanguage oppia_language = 1;
}

// Params required when creating a new AppLanguageActivity.
message AppLanguageActivityParams {
  // The default app language previously selected by the user (upon opening the activity).
  OppiaLanguage oppia_language = 1;
}

// The bundle of properties that are saved upon configuration changes in AppLanguageActivity.
message AppLanguageActivityStateBundle {
  // The default app language selected by the user.
  OppiaLanguage oppia_language = 1;
}

message SurveyActivityParams {
  // The ID of the profile for which the survey is to be shown.
  ProfileId profile_id = 1;

  // The ID of the topic to which the triggering exploration belongs.
  string topic_id = 2;

  // The ID of the triggering exploration.
  string exploration_id = 3;
}

apply plugin: 'jacoco'


jacoco {
  toolVersion = "0.8.6"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}
project.afterEvaluate {

  (android.hasProperty('applicationVariants')
      ? android.'applicationVariants'
      : android.'libraryVariants').all { variant ->
    def variantName = variant.name
    def unitTestTask = "test${variantName.capitalize()}UnitTest"
    def uiTestCoverageTask = "create${variantName.capitalize()}CoverageReport"

    tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
        "$unitTestTask",
        ":data:testDebugUnitTest",
        ":domain:testDebugUnitTest",
        ":testing:testDebugUnitTest",
        ":utility:testDebugUnitTest"
    ]) {
      group = "Reporting"
      description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"

      reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
      }

      def fileFilter = [
          // data binding
          'android/databinding/**/*.class',
          '**/android/databinding/*Binding.class',
          '**/android/databinding/*',
          '**/androidx/databinding/*',
          '**/BR.*',
          // android
          '**/R.class',
          '**/R$*.class',
          '**/BuildConfig.*',
          '**/Manifest*.*',
          '**/*Test*.*',
          'android/**/*.*',
          // kotlin
          '**/*MapperImpl*.*',
          '**/*$ViewInjector*.*',
          '**/*$ViewBinder*.*',
          '**/BuildConfig.*',
          '**/*Component*.*',
          '**/*BR*.*',
          '**/Manifest*.*',
          '**/*$Lambda$*.*',
          '**/*Companion*.*',
          '**/*Module*.*',
          '**/*Dagger*.*',
          '**/*MembersInjector*.*',
          '**/*_MembersInjector.class',
          '**/*_Factory*.*',
          '**/*_Provide*Factory*.*',
          '**/*Extensions*.*',
          // sealed and data classes
          '**/*$Result.*',
          '**/*$Result$*.*'
      ]

      classDirectories.setFrom(files([
          fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: fileFilter)
      ]))

      def variantSourceSets = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
      sourceDirectories.setFrom(project.files(variantSourceSets))


      executionData(files([
          "$project.buildDir/jacoco/${unitTestTask}.exec",
      ]))
    }
  }
}
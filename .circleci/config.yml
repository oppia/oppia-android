# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
workflows:
  version: 2
  circleci_tests:
    jobs:
      - setup
      - linters:
          requires:
            - setup
      - app_build:
          requires:
              - setup
      - utility_tests:
          requires:
              - setup

var_for_docker_image: &docker_image circleci/android:api-28

anchor_for_job_defaults: &job_defaults
  working_directory: /home/circleci/oppia-android
  environment:
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Xmx3200m -XX:+HeapDumpOnOutOfMemoryError'
      GRADLE_OPTIONS: --no-daemon --max-workers 2
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
  docker:
    - image: *docker_image

anchor_for_restore_cache: &restore_cache
  keys: jars-{{ checksum "build.gradle" }}

anchor_for_android_dependencies: &install_android_dependencies
  name: Install Android dependencies
  command: ./.circleci/gradle/gradlew androidDependencies
      

version: 2
jobs:
  setup:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          <<: *install_android_dependencies
      - run:
          name: Download Ktlint
          command: >
                KTLINT="0.37.0"

                echo Using Ktlint $KTLINT

                curl -sSLO
                https://github.com/pinterest/ktlint/releases/download/$KTLINT/ktlint

                chmod a+x ktlint
      - persist_to_workspace:
          root: /home/circleci/oppia-android

  linters:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/oppia-android
      - run:
          name: Kotlin tests - Data, Utility
          command: ./ktlint utility/**/*.kt data/**/*.kt && echo "Lint completed successfully"
      - store_artifacts:
          path: linter/reports
      - store_test_results:
          path: linter/test-results
  app_build:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/oppia-android
      - run: 
          name: Build App
          command: ./.circleci/gradle/gradlew -i build
      - store_artifacts:
          path: app/build/reports
      - store_test_results:
          path: app/build/test-results
  utility_tests:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/
      - run: 
          name: Utility Robolectric Tests
          command: ./.circleci/gradle/gradlew -i :utility:testDebugUnitTest
      - run:
          name: Save test results
          command: |
            mkdir -p ~/utility-test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/utility-test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/utility-test-results
      - store_artifacts:
          path: ~/utility-test-results/junit
  non_flaky_tests:
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache:
          <<: *restore_cache
      - run:
          name: Install Android dependencies
          command: ./.circleci/gradle/gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}
      - run: 
          name: Build App
          command: ./.circleci/gradle/gradlew -i build
      - run:
          name: Utility tests
          command: ./.circleci/gradle/gradlew -i :utility:test --no-daemon --max-workers 2
      - run:
          name: Domain tests
          command: ./.circleci/gradle/gradlew -i :domain:test --no-daemon --max-workers 2
      - run:
          name: App -  FAQ, Help, Splash, Parser, RecyclerView, Story, Utility tests, Walkthrough
          command: ./.circleci/gradle/gradlew -i :app:testDebugUnitTest --tests org.oppia.app.faq* --tests org.oppia.app.help* --tests org.oppia.app.splash*
            --tests org.oppia.app.parser* --tests org.oppia.app.recyclerview* --tests org.oppia.app.story* --tests org.oppia.app.utility* --tests org.oppia.app.walkthrough*
            --no-daemon --max-workers 2
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion 31
  buildToolsVersion "29.0.2"

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 31
    versionCode 1
    versionName "1.0"
    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath true
      }
    }
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
    freeCompilerArgs += [
        "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
    ]
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        // Enable forking to ensure each test is properly run in isolation. For context, see:
        // https://discuss.gradle.org/t/36066/2 & https://github.com/oppia/oppia-android/issues/1942
        forkEvery = 1
        maxParallelForks = Runtime.getRuntime().availableProcessors()

        // https://discuss.gradle.org/t/29495/2 & https://stackoverflow.com/a/34299238.
        testLogging {
          events "passed", "skipped", "failed"
          showExceptions = true
          exceptionFormat = "full"
          showCauses = true
          showStackTraces = true
          showStandardStreams = false
        }
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}

// These tests aren't supported in Gradle since they make use of test resources & AGP doesn't
// support merging resources for test builds, or they rely on a compile-time built proto
// configuration file which the current Gradle configuration doesn't support. This test runs
// correctly for Bazel & is included in the CI workflow that runs Bazel tests.
// https://stackoverflow.com/a/69141612 seems like the only solution that actually works (versus
// trying to exclude via sourceSets), so the following is an adapted version that ensures all
// generated sources that may reference the test also don't exist (such as Dagger running to
// generate a test application component). Note that this must exist in tandem with the sourceSet
// exclusion in order to properly work.
def filesToExclude = [
    '**/*LanguageConfigRetrieverTest*.kt',
    '**/*LanguageConfigRetrieverProductionTest*.kt',
    '**/*LocaleControllerTest*.kt',
    '**/*TranslationControllerTest*.kt'
]
tasks.withType(SourceTask.class).configureEach {
  it.exclude(filesToExclude)
}
android.sourceSets.test.java.exclude(filesToExclude)
android.sourceSets.test.kotlin.exclude(filesToExclude)

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation(
      'androidx.appcompat:appcompat:1.0.2',
      'androidx.exifinterface:exifinterface:1.0.0-rc01',
      'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha03',
      'androidx.lifecycle:lifecycle-extensions:2.0.0',
      'androidx.work:work-runtime-ktx:2.4.0',
      'com.google.dagger:dagger:2.24',
      'com.google.firebase:firebase-analytics-ktx:17.5.0',
      'com.google.firebase:firebase-crashlytics:17.0.0',
      'com.google.firebase:firebase-firestore-ktx:21.6.0',
      'com.google.firebase:firebase-auth-ktx:20.0.0',
      'com.google.guava:guava:28.1-android',
      'com.google.protobuf:protobuf-javalite:3.17.3',
      "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  )
  compileOnly(
      'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2',
      'javax.annotation:javax.annotation-api:1.3.2',
      'org.glassfish.jaxb:jaxb-runtime:2.3.2',
  )
  testImplementation(
      'android.arch.core:core-testing:1.1.1',
      'androidx.test.espresso:espresso-core:3.2.0',
      'androidx.test.ext:junit:1.1.1',
      'androidx.work:work-testing:2.4.0',
      'com.google.dagger:dagger:2.24',
      'com.google.truth.extensions:truth-liteproto-extension:1.1.3',
      'com.google.truth:truth:1.1.3',
      'com.squareup.okhttp3:mockwebserver:4.7.2',
      'junit:junit:4.12',
      "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version",
      'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2',
      'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.2.2',
      'org.mockito:mockito-core:3.9.0',
      'org.robolectric:robolectric:4.5',
      project(":testing"),
  )
  kapt(
      'com.google.dagger:dagger-compiler:2.24',
  )
  kaptTest(
      'com.google.dagger:dagger-compiler:2.24',
  )
  // TODO(#59): Avoid needing to expose data implementations to other modules in order to make Oppia symbols
  // sufficiently visible for generated Dagger code. This can be done more cleanly via Bazel since dependencies can be
  // controlled more directly than in Gradle.
  api project(':data')
  implementation project(':model')
  implementation project(':utility')
}
// The GeneratedMessageLite implementations of protobufs are depending on protobuf-java
// instead of protobuf-lite after Android Studio 3.5,
// The below command stops that from happening: https://github.com/google/tink/issues/282
configurations {
  all*.exclude module: 'protobuf-java'
}

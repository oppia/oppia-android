apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.8.2"
  version "0.7.1.201405082137"
}

android {
  compileSdkVersion 29
  buildToolsVersion "29.0.2"

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 29
    versionCode 1
    versionName "1.0"
    multiDexEnabled true
    testInstrumentationRunner "org.oppia.android.testing.OppiaTestRunner"
    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath true
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }

  testOptions {
    execution 'ANDROID_TEST_ORCHESTRATOR'
    animationsDisabled true

    unitTests {
      includeAndroidResources = true
      all {
        // Enable forking to ensure each test is properly run in isolation. For context, see:
        // https://discuss.gradle.org/t/36066/2 & https://github.com/oppia/oppia-android/issues/1942
        forkEvery = 1
        maxParallelForks = Runtime.getRuntime().availableProcessors()

        // https://discuss.gradle.org/t/29495/2 & https://stackoverflow.com/a/34299238.
        testLogging {
          events "passed", "skipped", "failed"
          showExceptions = true
          exceptionFormat = "full"
          showCauses = true
          showStackTraces = true
          showStandardStreams = false
        }
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      testCoverageEnabled true
    }
    debug {
      testCoverageEnabled true
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation(
      'androidx.appcompat:appcompat:1.0.2',
      'androidx.exifinterface:exifinterface:1.0.0-rc01',
      'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha03',
      'androidx.work:work-runtime-ktx:2.4.0',
      'com.google.dagger:dagger:2.24',
      'com.google.firebase:firebase-analytics-ktx:17.5.0',
      'com.google.firebase:firebase-crashlytics:17.0.0',
      "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  )
  testImplementation(
      'android.arch.core:core-testing:1.1.1',
      'androidx.test.espresso:espresso-core:3.2.0',
      'androidx.test.ext:junit:1.1.1',
      'androidx.work:work-testing:2.4.0',
      'com.google.dagger:dagger:2.24',
      'com.google.truth:truth:0.43',
      'junit:junit:4.12',
      "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version",
      'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.2',
      'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.2.2',
      'org.mockito:mockito-core:2.19.0',
      'org.robolectric:robolectric:4.3',
      'androidx.test:runner:1.1.0',
      project(":testing"),
  )
  androidTestUtil(
      'androidx.test:orchestrator:1.2.0',
  )
  kapt(
      'com.google.dagger:dagger-compiler:2.24',
  )
  kaptTest(
      'com.google.dagger:dagger-compiler:2.24',
  )
  // TODO(#59): Avoid needing to expose data implementations to other modules in order to make Oppia symbols
  // sufficiently visible for generated Dagger code. This can be done more cleanly via Bazel since dependencies can be
  // controlled more directly than in Gradle.
  api project(':data')
  implementation project(':model')
  implementation project(':utility')
}
repositories {
  mavenCentral()
}
// The GeneratedMessageLite implementations of protobufs are depending on protobuf-java
// instead of protobuf-lite after Android Studio 3.5,
// The below command stops that from happening: https://github.com/google/tink/issues/282
configurations {
  all*.exclude module: 'protobuf-java'
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

  reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled false
  }
  def fileFilter = [
      '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*'
  ]


  def mainSrc = "$project.projectDir/src/main/kotlin"
  def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
  def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

  classDirectories.from = files([debugTree], [kotlinDebugTree])
  sourceDirectories.setFrom(files([mainSrc]))
  executionData.setFrom(fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
  ]))
}

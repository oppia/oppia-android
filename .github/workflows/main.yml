name: CI Lint and Tests

# Controls when the action will run. Triggers the workflow on pull request
# events or push events in the develop branch.
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      # Push events on develop branch
      - develop

# This workflow has the following jobs:
# linters: Java, Kotlin, Protobuf, Bazel
# robolectric_tests: Robolectric tests for all modules except the app module
# app_tests: Non-flaky Robolectric tests for the app module
jobs:
  linters:
    name: Lint Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]

    steps:
    - uses: actions/checkout@v2

    - name: Create oppia android tools directory
      run: mkdir -p $HOME/oppia-android-tools

    # Java 11 is specifically needed for Checkstyle.
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Download Checkstyle
      run: |
        cd $HOME/oppia-android-tools
        bash /home/runner/work/oppia-android/oppia-android/scripts/checkstyle_download.sh

    - name: Download Ktlint
      run: |
        cd $HOME/oppia-android-tools
        bash /home/runner/work/oppia-android/oppia-android/scripts/ktlint_download.sh

    - name: Download buf
      run: |
        cd $HOME/oppia-android-tools
        BUFVERSION="v0.15.0"
        echo Using Bufbuild version $BUFVERSION
        curl -sSL https://github.com/bufbuild/buf/releases/download/$BUFVERSION/buf-$(uname -s)-$(uname -m) > buf
        chmod a+x buf

    - name: Download Buildifier
      run: |
        cd $HOME/oppia-android-tools
        bash /home/runner/work/oppia-android/oppia-android/scripts/buildifier_download.sh

    - name: Java lint check
      run: |
        bash /home/runner/work/oppia-android/oppia-android/scripts/checkstyle_lint_check.sh $HOME

    - name: Kotlin lint check
      run: |
        bash /home/runner/work/oppia-android/oppia-android/scripts/ktlint_lint_check.sh $HOME

    - name: Protobuf lint check
      run: $HOME/oppia-android-tools/buf check lint --input=model/src/main/proto --input-config buf.yaml && echo "Protobuf lint check completed successfully"

    - name: Bazel lint check
      run: |
        bash /home/runner/work/oppia-android/oppia-android/scripts/buildifier_lint_check.sh $HOME

  robolectric_tests:
    name: Robolectric Tests (Non-App Modules)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
     - uses: actions/checkout@v2
     - uses: actions/cache@v2
       id: cache
       with:
         path: ~/.gradle
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-jars-{{ checksum "build.gradle" }}

     - name: Set up JDK 1.9
       uses: actions/setup-java@v1
       with:
          java-version: 1.9

     - name: Install Dependencies
       if: steps.cache.outputs.cache-hit != 'true'
       run: ./gradlew --full-stacktrace androidDependencies

     - name: Build App
       # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
       run: sudo ./gradlew --full-stacktrace assembleDebug

     - name: Utility tests
       # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
       run:  sudo ./gradlew --full-stacktrace :utility:testDebugUnitTest
     - name: Upload Utility Test Reports
       uses: actions/upload-artifact@v2
       if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
       with:
         name: utility reports
         path: utility/build/reports

     - name: Domain tests
       # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
       run:  sudo ./gradlew --full-stacktrace :domain:testDebugUnitTest
     - name: Upload Domain Test Reports
       uses: actions/upload-artifact@v2
       if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
       with:
         name: domain reports
         path: domain/build/reports

     - name: Testing tests
       # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
       run:  sudo ./gradlew --full-stacktrace :testing:testDebugUnitTest
     - name: Upload Testing Test Reports
       uses: actions/upload-artifact@v2
       if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
       with:
         name: testing reports
         path: testing/build/reports

  app_tests:
    name: Robolectric Tests - App Module (Non-Flaky)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
         path: ~/.gradle/caches
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-jars-{{ checksum "build.gradle" }}

      - name: Set up JDK 1.9
        uses: actions/setup-java@v1
        with:
          java-version: 1.9

      - name: Robolectric tests - App Module
        # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
        run: |
          sudo ./gradlew --full-stacktrace :app:testDebugUnitTest
      - name: Upload App Test Reports
        uses: actions/upload-artifact@v2
        if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
        with:
         name: app reports
         path: app/build/reports

  bazel_build_app:
    name: Build Binary with Bazel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
      - name: Clone Oppia Bazel
        run: git clone https://github.com/oppia/bazel.git $HOME/oppia-bazel
      - name: Set up JDK 9
        uses: actions/setup-java@v1
        with:
          java-version: 9
      - name: Extract Android tools
        run: |
          mkdir -p $GITHUB_WORKSPACE/tmp/android_tools
          cd $HOME/oppia-bazel
          unzip bazel-tools.zip
          tar -xf $HOME/oppia-bazel/android_tools.tar.gz -C $GITHUB_WORKSPACE/tmp/android_tools
      # See https://git-secret.io/installation for details on installing git-secret. Note that the
      # apt-get method isn't used since it's much slower to update & upgrade apt before installation
      # versus just directly cloning & installing the project. Further, the specific version
      # shouldn't matter since git-secret relies on a future-proof storage mechanism for secrets.
      # This also uses a different directory to install git-secret to avoid requiring root access
      # when running the git secret command.
      - name: Install git-secret (non-fork only)
        if: ${{ github.event.pull_request.head.repo.full_name == 'oppia/oppia-android' }}
        shell: bash
        run: |
          cd $HOME
          mkdir -p $HOME/gitsecret
          git clone https://github.com/sobolevn/git-secret.git git-secret
          cd git-secret && make build
          PREFIX="$HOME/gitsecret" make install
          echo "$HOME/gitsecret" >> $GITHUB_PATH
          echo "$HOME/gitsecret/bin" >> $GITHUB_PATH
      - name: Decrypt secrets (non-fork only)
        if: ${{ github.event.pull_request.head.repo.full_name == 'oppia/oppia-android' }}
        env:
          GIT_SECRET_GPG_PRIVATE_KEY: ${{ secrets.GIT_SECRET_GPG_PRIVATE_KEY }}
        run: |
          cd $HOME
          # NOTE TO DEVELOPERS: Make sure to never print this key directly to stdout!
          echo $GIT_SECRET_GPG_PRIVATE_KEY | base64 --decode > ./git_secret_private_key.gpg
          gpg --import ./git_secret_private_key.gpg
          cd $GITHUB_WORKSPACE
          git secret reveal
      - name: Unzip Bazel binary
        run: |
          cd $HOME/oppia-bazel
          unzip bazel-build.zip
          cd $GITHUB_WORKSPACE
          chmod a+x $HOME/oppia-bazel/bazel
      # Note that caching only works on non-forks.
      - name: Build Oppia binary (with caching, non-fork only)
        if: ${{ github.event.pull_request.head.repo.full_name == 'oppia/oppia-android' }}
        env:
          BAZEL_REMOTE_CACHE_URL: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        run: |
          $HOME/oppia-bazel/bazel build --override_repository=android_tools=$GITHUB_WORKSPACE/tmp/android_tools --remote_http_cache=$BAZEL_REMOTE_CACHE_URL --google_credentials=./config/oppia-dev-workflow-remote-cache-credentials.json -- //:oppia
      - name: Build Oppia binary (without caching, fork only)
        if: ${{ github.event.pull_request.head.repo.full_name != 'oppia/oppia-android' }}
        run: |
          $HOME/oppia-bazel/bazel build --override_repository=android_tools=$GITHUB_WORKSPACE/tmp/android_tools -- //:oppia
      - name: Copy Oppia APK for uploading
        run: cp $GITHUB_WORKSPACE/bazel-bin/oppia.apk /home/runner/work/oppia-android/oppia-android/
      - uses: actions/upload-artifact@v2
        with:
          name: oppia-bazel-apk
          path: /home/runner/work/oppia-android/oppia-android/oppia.apk

# Contains jobs corresponding to publishing coverage reports generated by code_coverage.yml.

name: Comment Coverage Report

# Controls when the action will run. Triggers the workflow  on pull request events
# (opened, synchronize, reopened)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  check_code_coverage_completed:
    name: Check code coverage completed
    runs-on: ubuntu-latest
    steps:
      - name: Wait for code coverage to complete
        id: wait-for-coverage
        uses: ArcticLampyrid/action-wait-for-workflow@v1.2.0
        with:
          workflow: code_coverage.yml
          sha: auto
          allowed-conclusions: |
            success
            failure

  comment_coverage_report:
    name: Comment Code Coverage Report
    needs: check_code_coverage_completed
    permissions:
      pull-requests: write

    # The expression if: ${{ !cancelled() }} runs a job or step regardless of its success or failure while responding to cancellations,
    # serving as a cancellation-compliant alternative to if: ${{ always() }} in concurrent workflows.
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Find CI workflow run for PR
        id: find-workflow-run
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            // Find the last successful workflow run for the current PR's head
            const { owner, repo } = context.repo;
            const runsResponse = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'code_coverage.yml',
              event: 'pull_request',
              head_sha: '${{ github.event.pull_request.head.sha }}',
            });

            const runs = runsResponse.data.workflow_runs;
            runs.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());

            const run = runs[0];
            if(!run) {
              core.setFailed('Could not find a succesful workflow run for the PR');
              return;
            }

            core.setOutput('run-id', run.id);

      - name: Download Generated Markdown Report
        uses: actions/download-artifact@v4
        if: ${{ !cancelled() }} # IMPORTANT: Upload reports regardless of success or failure status
        with:
          name: final-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.find-workflow-run.outputs.run-id }}

      - name: Upload Coverage Report as PR Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: 'CoverageReport.md'

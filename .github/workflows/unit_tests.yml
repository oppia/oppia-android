# Contains jobs corresponding to unit tests. Integration (e.g. emulator or screenshot testing) or End-to-End tests should not be triggered here.

name: Unit Tests (Robolectric - Bazel)

# Controls when the action will run. Triggers the workflow on pull request
# events or push events in the develop branch.
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      # Push events on develop branch
      - develop

jobs:
  bazel_compute_affected_targets:
    name: Compute affected tests
    runs-on: ubuntu-18.04
    outputs:
      matrix: ${{ steps.compute-test-matrix-from-affected.outputs.matrix || steps.compute-test-matrix-from-all.outputs.matrix }}
      have_tests_to_run: ${{ steps.compute-test-matrix-from-affected.outputs.have_tests_to_run || steps.compute-test-matrix-from-all.outputs.have_tests_to_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Bazel
        uses: abhinavsingh/setup-bazel@v3
        with:
          version: 4.0.0
      - name: Compute test matrix based on affected targets
        id: compute-test-matrix-from-affected
        if: "!contains(github.event.pull_request.title, '[RunAllTests]')"
        # https://unix.stackexchange.com/a/338124 for reference on creating a JSON-friendly
        # comma-separated list of test targets for the matrix.
        run: |
          bazel run //scripts:compute_affected_tests -- $(pwd) $(pwd)/affected_targets.log origin/develop
          TEST_TARGET_LIST=$(cat ./affected_targets.log | sed 's/^\|$/"/g' | paste -sd, -)
          echo "Affected tests (note that this might be all tests if on the develop branch): $TEST_TARGET_LIST"
          echo "::set-output name=matrix::{\"test-target\":[$TEST_TARGET_LIST]}"
          if [[ ! -z "$TEST_TARGET_LIST" ]]; then
            echo "::set-output name=have_tests_to_run::true"
          else
            echo "::set-output name=have_tests_to_run::false"
            echo "No tests are detected as affected by this change. If this is wrong, you can add '[RunAllTests]' to the PR title to force a run."
          fi
      - name: Compute test matrix based on all tests
        id: compute-test-matrix-from-all
        if: "contains(github.event.pull_request.title, '[RunAllTests]')"
        run: |
          TEST_TARGET_LIST=$(bazel query "kind(test, //...)" | sed 's/^\|$/"/g' | paste -sd, -)
          echo "Affected tests (note that this might be all tests if on the develop branch): $TEST_TARGET_LIST"
          echo "::set-output name=matrix::{\"test-target\":[$TEST_TARGET_LIST]}"
          echo "::set-output name=have_tests_to_run::true"

  bazel_run_test:
    name: Run Bazel Test
    needs: bazel_compute_affected_targets
    if: ${{ needs.bazel_compute_affected_targets.outputs.have_tests_to_run == 'true' }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{fromJson(needs.bazel_compute_affected_targets.outputs.matrix)}}
    env:
      ENABLE_CACHING: false
      CACHE_DIRECTORY: ~/.bazel_cache
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 9
        uses: actions/setup-java@v1
        with:
          java-version: 9

      - name: Set up Bazel
        uses: abhinavsingh/setup-bazel@v3
        with:
          version: 4.0.0

      - name: Set up build environment
        uses: ./.github/actions/set-up-android-bazel-build-environment

      - name: Compute test caching bucket
        env:
          TEST_TARGET: ${{ matrix.test-target }}
        run: |
          echo "Test target: $TEST_TARGET"
          TEST_CATEGORY=$(echo "$TEST_TARGET" | grep -oP 'org/oppia/android/(.+?)/' | cut -f 4 -d "/")
          echo "Test category: $TEST_CATEGORY"
          echo "TEST_CACHING_BUCKET=$TEST_CATEGORY" >> $GITHUB_ENV

      # For reference on this & the later cache actions, see:
      # https://github.com/actions/cache/issues/239#issuecomment-606950711 &
      # https://github.com/actions/cache/issues/109#issuecomment-558771281. Note that these work
      # with Bazel since Bazel can share the most recent cache from an unrelated build and still
      # benefit from incremental build performance (assuming that actions/cache aggressively removes
      # older caches due to the 5GB cache limit size & Bazel's large cache size).
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.CACHE_DIRECTORY }}
          key: ${{ runner.os }}-${{ env.CACHE_DIRECTORY }}-bazel-tests-${{ env.TEST_CACHING_BUCKET }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_DIRECTORY }}-bazel-tests-${{ env.TEST_CACHING_BUCKET }}-
            ${{ runner.os }}-${{ env.CACHE_DIRECTORY }}-bazel-tests-
            ${{ runner.os }}-${{ env.CACHE_DIRECTORY }}-bazel-binary-
            ${{ runner.os }}-${{ env.CACHE_DIRECTORY }}-bazel-

      # This check is needed to ensure that Bazel's unbounded cache growth doesn't result in a
      # situation where the cache never updates (e.g. due to exceeding GitHub's cache size limit)
      # thereby only ever using the last successful cache version. This solution will result in a
      # few slower CI actions around the time cache is detected to be too large, but it should
      # incrementally improve thereafter.
      - name: Ensure cache size
        env:
          BAZEL_CACHE_DIR: ${{ env.CACHE_DIRECTORY }}
        run: |
          # See https://stackoverflow.com/a/27485157 for reference.
          EXPANDED_BAZEL_CACHE_PATH="${BAZEL_CACHE_DIR/#\~/$HOME}"
          CACHE_SIZE_MB=$(du -smc $EXPANDED_BAZEL_CACHE_PATH | grep total | cut -f1)
          echo "Total size of Bazel cache (rounded up to MBs): $CACHE_SIZE_MB"
          # Use a 4.5GB threshold since actions/cache compresses the results, and Bazel caches seem
          # to only increase by a few hundred megabytes across changes for unrelated branches. This
          # is also a reasonable upper-bound (local tests as of 2021-03-31 suggest that a full build
          # of the codebase (e.g. //...) from scratch only requires a ~2.1GB uncompressed/~900MB
          # compressed cache).
          if [[ "$CACHE_SIZE_MB" -gt 4500 ]]; then
            echo "Cache exceeds cut-off; resetting it (will result in a slow build)"
            rm -rf $EXPANDED_BAZEL_CACHE_PATH
          fi

      - name: Configure Bazel to use a local cache
        env:
          BAZEL_CACHE_DIR: ${{ env.CACHE_DIRECTORY }}
        run: |
          EXPANDED_BAZEL_CACHE_PATH="${BAZEL_CACHE_DIR/#\~/$HOME}"
          echo "Using $EXPANDED_BAZEL_CACHE_PATH as Bazel's cache path"
          echo "build --disk_cache=$EXPANDED_BAZEL_CACHE_PATH" >> $HOME/.bazelrc
        shell: bash

      # See explanation in bazel_build_app for how this is installed.
      - name: Install git-secret (non-fork only)
        if: ${{ env.ENABLE_CACHING == 'true' && ((github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event.pull_request.head.repo.full_name == 'oppia/oppia-android')) }}
        shell: bash
        run: |
          cd $HOME
          mkdir -p $HOME/gitsecret
          git clone https://github.com/sobolevn/git-secret.git git-secret
          cd git-secret && make build
          PREFIX="$HOME/gitsecret" make install
          echo "$HOME/gitsecret" >> $GITHUB_PATH
          echo "$HOME/gitsecret/bin" >> $GITHUB_PATH

      - name: Decrypt secrets (non-fork only)
        if: ${{ env.ENABLE_CACHING == 'true' && ((github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event.pull_request.head.repo.full_name == 'oppia/oppia-android')) }}
        env:
          GIT_SECRET_GPG_PRIVATE_KEY: ${{ secrets.GIT_SECRET_GPG_PRIVATE_KEY }}
        run: |
          cd $HOME
          # NOTE TO DEVELOPERS: Make sure to never print this key directly to stdout!
          echo $GIT_SECRET_GPG_PRIVATE_KEY | base64 --decode > ./git_secret_private_key.gpg
          gpg --import ./git_secret_private_key.gpg
          cd $GITHUB_WORKSPACE
          git secret reveal

      - name: Run Oppia Test (with caching, non-fork only)
        if: ${{ env.ENABLE_CACHING == 'true' && ((github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event.pull_request.head.repo.full_name == 'oppia/oppia-android')) }}
        env:
          BAZEL_REMOTE_CACHE_URL: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        run: bazel test --remote_http_cache=$BAZEL_REMOTE_CACHE_URL --google_credentials=./config/oppia-dev-workflow-remote-cache-credentials.json -- ${{ matrix.test-target }}

      - name: Run Oppia Test (without caching, or on a fork)
        if: ${{ env.ENABLE_CACHING == 'false' || ((github.ref != 'refs/heads/develop' || github.event_name != 'push') && (github.event.pull_request.head.repo.full_name != 'oppia/oppia-android')) }}
        env:
          BAZEL_REMOTE_CACHE_URL: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        run: bazel test -- ${{ matrix.test-target }}

  # Reference: https://github.community/t/127354/7.
  check_test_results:
      name: Check Bazel Test Results
      needs: [bazel_compute_affected_targets, bazel_run_test]
      if: ${{ always() }}
      runs-on: ubuntu-18.04
      steps:
        # This step will be skipped if there are no tests to run, so the overall job should pass.
        - name: Check tests passed (for tests that ran)
          if: ${{ needs.bazel_compute_affected_targets.outputs.have_tests_to_run == 'true' && needs.bazel_run_test.result != 'success' }}
          run: exit 1

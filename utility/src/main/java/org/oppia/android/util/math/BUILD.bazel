"""
General-purpose mathematics utilities, especially for supporting math-based interactions.
"""

load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", "kt_android_library")

android_library(
    name = "extensions",
    visibility = [
        "//:oppia_api_visibility",
    ],
    exports = [
        ":comparator_extensions",
        ":float_extensions",
        ":fraction_extensions",
        ":math_expression_extensions",
        ":polynomial_extensions",
        ":ratio_extensions",
        ":real_extensions",
    ],
)

kt_android_library(
    name = "fraction_parser",
    srcs = ["FractionParser.kt"],
    visibility = [
        "//:oppia_api_visibility",
    ],
    deps = [
        "//model/src/main/proto:math_java_proto_lite",
        "//utility/src/main/java/org/oppia/android/util/extensions:string_extensions",
    ],
)

kt_android_library(
    name = "math_expression_parser",
    srcs = [
        "MathExpressionParser.kt",
    ],
    visibility = [
        "//:oppia_api_visibility",
    ],
    deps = [
        ":math_parsing_error",
        ":peekable_iterator",
        ":real_extensions",
        ":tokenizer",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "math_parsing_error",
    srcs = [
        "MathParsingError.kt",
    ],
    visibility = [
        "//:oppia_api_visibility",
    ],
    deps = [
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "tokenizer",
    srcs = [
        "MathTokenizer.kt",
    ],
    visibility = [
        "//:oppia_testing_visibility",
    ],
    deps = [
        ":peekable_iterator",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "peekable_iterator",
    srcs = [
        "PeekableIterator.kt",
    ],
    visibility = [
        "//:oppia_testing_visibility",
    ],
)

kt_android_library(
    name = "comparator_extensions",
    srcs = [
        "ComparatorExtensions.kt",
    ],
    deps = [
        "//third_party:com_google_protobuf_protobuf-javalite",
    ],
)

kt_android_library(
    name = "float_extensions",
    srcs = [
        "FloatExtensions.kt",
    ],
    deps = [
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "fraction_extensions",
    srcs = [
        "FractionExtensions.kt",
    ],
    deps = [
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "math_expression_extensions",
    srcs = [
        "MathExpressionExtensions.kt",
    ],
    deps = [
        ":expression_to_comparable_operation_converter",
        ":expression_to_latex_converter",
        ":expression_to_polynomial_converter",
        ":numeric_expression_evaluator",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "polynomial_extensions",
    srcs = [
        "PolynomialExtensions.kt",
    ],
    deps = [
        ":comparator_extensions",
        ":real_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "ratio_extensions",
    srcs = [
        "RatioExtensions.kt",
    ],
    deps = [
        ":fraction_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "real_extensions",
    srcs = [
        "RealExtensions.kt",
    ],
    deps = [
        ":float_extensions",
        ":fraction_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "expression_to_comparable_operation_converter",
    srcs = [
        "ExpressionToComparableOperationConverter.kt",
    ],
    deps = [
        ":comparator_extensions",
        ":real_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "expression_to_latex_converter",
    srcs = [
        "ExpressionToLatexConverter.kt",
    ],
    deps = [
        ":real_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "expression_to_polynomial_converter",
    srcs = [
        "ExpressionToPolynomialConverter.kt",
    ],
    deps = [
        ":polynomial_extensions",
        ":real_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)

kt_android_library(
    name = "numeric_expression_evaluator",
    srcs = [
        "NumericExpressionEvaluator.kt",
    ],
    deps = [
        ":real_extensions",
        "//model/src/main/proto:math_java_proto_lite",
    ],
)
